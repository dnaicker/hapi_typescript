"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OkapiMetadata = exports.Hashing = exports.Oberon = exports.LdProofs = exports.DIDComm = exports.DIDKey = void 0;
const proto = __importStar(require("./proto"));
__exportStar(require("./proto"), exports);
// Type information for exported functions
// import * as native from "./native/okapi_wasm"
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let native;
let initialized = false;
async function initialize() {
    if (!initialized) {
        // @ts-ignore
        native = await Promise.resolve().then(() => __importStar(require("./native/okapi_wasm")));
        initialized = true;
    }
}
class DIDKey {
    static async generate(request) {
        await initialize();
        return proto.GenerateKeyResponse.decode(native.didkey_generate(proto.GenerateKeyRequest.encode(request).finish()));
    }
    static async resolve(request) {
        await initialize();
        return proto.ResolveResponse.decode(native.didkey_resolve(proto.ResolveRequest.encode(request).finish()));
    }
}
exports.DIDKey = DIDKey;
class DIDComm {
    static async pack(request) {
        await initialize();
        return proto.PackResponse.decode(native.didcomm_pack(proto.PackRequest.encode(request).finish()));
    }
    static async unpack(request) {
        await initialize();
        return proto.UnpackResponse.decode(native.didcomm_unpack(proto.UnpackRequest.encode(request).finish()));
    }
    static async sign(request) {
        await initialize();
        return proto.SignResponse.decode(native.didcomm_sign(proto.SignRequest.encode(request).finish()));
    }
    static async verify(request) {
        await initialize();
        return proto.VerifyResponse.decode(native.didcomm_verify(proto.VerifyRequest.encode(request).finish()));
    }
}
exports.DIDComm = DIDComm;
class LdProofs {
    static async createProof(request) {
        await initialize();
        return proto.CreateProofResponse.decode(native.ldproofs_create_proof(proto.CreateProofRequest.encode(request).finish()));
    }
}
exports.LdProofs = LdProofs;
class Oberon {
    static async createKey(request) {
        await initialize();
        return proto.CreateOberonKeyResponse.decode(native.oberon_create_key(proto.CreateOberonKeyRequest.encode(request).finish()));
    }
    static async createToken(request) {
        await initialize();
        return proto.CreateOberonTokenResponse.decode(native.oberon_create_token(proto.CreateOberonTokenRequest.encode(request).finish()));
    }
    static async createProof(request) {
        await initialize();
        return proto.CreateOberonProofResponse.decode(native.oberon_create_proof(proto.CreateOberonProofRequest.encode(request).finish()));
    }
    static async verifyProof(request) {
        await initialize();
        return proto.VerifyOberonProofResponse.decode(native.oberon_verify_proof(proto.VerifyOberonProofRequest.encode(request).finish()));
    }
    static async blindToken(request) {
        await initialize();
        return proto.BlindOberonTokenResponse.decode(native.oberon_blind_token(proto.BlindOberonTokenRequest.encode(request).finish()));
    }
    static async unblindToken(request) {
        await initialize();
        return proto.UnBlindOberonTokenResponse.decode(native.oberon_unblind_token(proto.UnBlindOberonTokenRequest.encode(request).finish()));
    }
    static async verifyToken(request) {
        await initialize();
        return proto.VerifyOberonTokenResponse.decode(native.oberon_verify_token(proto.VerifyOberonTokenRequest.encode(request).finish()));
    }
}
exports.Oberon = Oberon;
class Hashing {
    static async blake3Hash(request) {
        await initialize();
        return proto.Blake3HashResponse.decode(native.blake3_hash(proto.Blake3HashRequest.encode(request).finish()));
    }
    static async blake3KeyedHash(request) {
        await initialize();
        return proto.Blake3KeyedHashResponse.decode(native.blake3_keyed_hash(proto.Blake3KeyedHashRequest.encode(request).finish()));
    }
    static async blake3DeriveKey(request) {
        await initialize();
        return proto.Blake3DeriveKeyResponse.decode(native.blake3_derive_key(proto.Blake3DeriveKeyRequest.encode(request).finish()));
    }
    static async sha256Hash(request) {
        await initialize();
        return proto.SHA256HashResponse.decode(native.sha256_hash(proto.SHA256HashRequest.encode(request).finish()));
    }
}
exports.Hashing = Hashing;
class OkapiMetadata {
    static async getMetadata() {
        await initialize();
        const request = proto.MetadataRequest.fromPartial({});
        return proto.MetadataResponse.decode(native.okapi_metadata(proto.MetadataRequest.encode(request).finish()));
    }
}
exports.OkapiMetadata = OkapiMetadata;
//# sourceMappingURL=index.js.map