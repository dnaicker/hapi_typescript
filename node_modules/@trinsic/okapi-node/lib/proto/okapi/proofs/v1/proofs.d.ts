import { JsonWebKey } from "../../keys/v1/keys";
import _m0 from "protobufjs/minimal";
export declare enum LdSuite {
    LD_SUITE_UNSPECIFIED = 0,
    LD_SUITE_JCSED25519SIGNATURE2020 = 1,
    UNRECOGNIZED = -1
}
export declare function ldSuiteFromJSON(object: any): LdSuite;
export declare function ldSuiteToJSON(object: LdSuite): string;
export interface CreateProofRequest {
    /**
     * The input JSON document that will be used
     * to create the LD Proof. This document must
     * also contain a "proof" object, with the desired
     * values filled in.
     */
    document: {
        [key: string]: any;
    } | undefined;
    /**
     * The signer of the proof. This field must include
     * the 'kid' in full URI format.
     * Example:
     *  did:example:alice#key-1
     */
    key: JsonWebKey | undefined;
    /** The LD Suite to use to produce this proof */
    suite: LdSuite;
}
export interface CreateProofResponse {
    signedDocument: {
        [key: string]: any;
    } | undefined;
}
export interface VerifyProofRequest {
}
export interface VerifyProofResponse {
}
export declare const CreateProofRequest: {
    encode(message: CreateProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofRequest;
    fromJSON(object: any): CreateProofRequest;
    toJSON(message: CreateProofRequest): unknown;
    fromPartial(object: DeepPartial<CreateProofRequest>): CreateProofRequest;
};
export declare const CreateProofResponse: {
    encode(message: CreateProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofResponse;
    fromJSON(object: any): CreateProofResponse;
    toJSON(message: CreateProofResponse): unknown;
    fromPartial(object: DeepPartial<CreateProofResponse>): CreateProofResponse;
};
export declare const VerifyProofRequest: {
    encode(_: VerifyProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofRequest;
    fromJSON(_: any): VerifyProofRequest;
    toJSON(_: VerifyProofRequest): unknown;
    fromPartial(_: DeepPartial<VerifyProofRequest>): VerifyProofRequest;
};
export declare const VerifyProofResponse: {
    encode(_: VerifyProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofResponse;
    fromJSON(_: any): VerifyProofResponse;
    toJSON(_: VerifyProofResponse): unknown;
    fromPartial(_: DeepPartial<VerifyProofResponse>): VerifyProofResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
