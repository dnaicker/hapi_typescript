"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureExampleServiceDefinition = exports.BasicMessage = void 0;
/* eslint-disable */
const pbmse_1 = require("../../../pbmse/v1/pbmse");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseBasicMessage() {
    return { text: "" };
}
exports.BasicMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBasicMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.text !== undefined && (obj.text = message.text);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBasicMessage();
        message.text = (_a = object.text) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.SecureExampleServiceDefinition = {
    name: "SecureExampleService",
    fullName: "okapi.examples.v1.SecureExampleService",
    methods: {
        unary: {
            name: "Unary",
            requestType: pbmse_1.EncryptedMessage,
            requestStream: false,
            responseType: pbmse_1.EncryptedMessage,
            responseStream: false,
            options: {},
        },
        serverStreaming: {
            name: "ServerStreaming",
            requestType: pbmse_1.EncryptedMessage,
            requestStream: false,
            responseType: pbmse_1.EncryptedMessage,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=examples.js.map