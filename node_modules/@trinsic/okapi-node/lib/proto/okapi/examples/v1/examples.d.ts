import { EncryptedMessage } from "../../../pbmse/v1/pbmse";
import _m0 from "protobufjs/minimal";
export interface BasicMessage {
    text: string;
}
export declare const BasicMessage: {
    encode(message: BasicMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicMessage;
    fromJSON(object: any): BasicMessage;
    toJSON(message: BasicMessage): unknown;
    fromPartial(object: DeepPartial<BasicMessage>): BasicMessage;
};
export declare type SecureExampleServiceDefinition = typeof SecureExampleServiceDefinition;
export declare const SecureExampleServiceDefinition: {
    readonly name: "SecureExampleService";
    readonly fullName: "okapi.examples.v1.SecureExampleService";
    readonly methods: {
        readonly unary: {
            readonly name: "Unary";
            readonly requestType: {
                encode(message: EncryptedMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EncryptedMessage;
                fromJSON(object: any): EncryptedMessage;
                toJSON(message: EncryptedMessage): unknown;
                fromPartial(object: {
                    iv?: Uint8Array | undefined;
                    aad?: Uint8Array | undefined;
                    ciphertext?: Uint8Array | undefined;
                    tag?: Uint8Array | undefined;
                    recipients?: {
                        header?: {
                            mode?: import("../../../pbmse/v1/pbmse").EncryptionMode | undefined;
                            algorithm?: import("../../../pbmse/v1/pbmse").EncryptionAlgorithm | undefined;
                            keyId?: string | undefined;
                            senderKeyId?: string | undefined;
                        } | undefined;
                        contentEncryptionKey?: Uint8Array | undefined;
                    }[] | undefined;
                }): EncryptedMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EncryptedMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EncryptedMessage;
                fromJSON(object: any): EncryptedMessage;
                toJSON(message: EncryptedMessage): unknown;
                fromPartial(object: {
                    iv?: Uint8Array | undefined;
                    aad?: Uint8Array | undefined;
                    ciphertext?: Uint8Array | undefined;
                    tag?: Uint8Array | undefined;
                    recipients?: {
                        header?: {
                            mode?: import("../../../pbmse/v1/pbmse").EncryptionMode | undefined;
                            algorithm?: import("../../../pbmse/v1/pbmse").EncryptionAlgorithm | undefined;
                            keyId?: string | undefined;
                            senderKeyId?: string | undefined;
                        } | undefined;
                        contentEncryptionKey?: Uint8Array | undefined;
                    }[] | undefined;
                }): EncryptedMessage;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly serverStreaming: {
            readonly name: "ServerStreaming";
            readonly requestType: {
                encode(message: EncryptedMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EncryptedMessage;
                fromJSON(object: any): EncryptedMessage;
                toJSON(message: EncryptedMessage): unknown;
                fromPartial(object: {
                    iv?: Uint8Array | undefined;
                    aad?: Uint8Array | undefined;
                    ciphertext?: Uint8Array | undefined;
                    tag?: Uint8Array | undefined;
                    recipients?: {
                        header?: {
                            mode?: import("../../../pbmse/v1/pbmse").EncryptionMode | undefined;
                            algorithm?: import("../../../pbmse/v1/pbmse").EncryptionAlgorithm | undefined;
                            keyId?: string | undefined;
                            senderKeyId?: string | undefined;
                        } | undefined;
                        contentEncryptionKey?: Uint8Array | undefined;
                    }[] | undefined;
                }): EncryptedMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EncryptedMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EncryptedMessage;
                fromJSON(object: any): EncryptedMessage;
                toJSON(message: EncryptedMessage): unknown;
                fromPartial(object: {
                    iv?: Uint8Array | undefined;
                    aad?: Uint8Array | undefined;
                    ciphertext?: Uint8Array | undefined;
                    tag?: Uint8Array | undefined;
                    recipients?: {
                        header?: {
                            mode?: import("../../../pbmse/v1/pbmse").EncryptionMode | undefined;
                            algorithm?: import("../../../pbmse/v1/pbmse").EncryptionAlgorithm | undefined;
                            keyId?: string | undefined;
                            senderKeyId?: string | undefined;
                        } | undefined;
                        contentEncryptionKey?: Uint8Array | undefined;
                    }[] | undefined;
                }): EncryptedMessage;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
