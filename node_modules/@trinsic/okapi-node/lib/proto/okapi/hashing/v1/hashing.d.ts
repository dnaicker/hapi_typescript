import _m0 from "protobufjs/minimal";
export interface Blake3HashRequest {
    data: Uint8Array;
}
export interface Blake3HashResponse {
    digest: Uint8Array;
}
export interface Blake3KeyedHashRequest {
    data: Uint8Array;
    key: Uint8Array;
}
export interface Blake3KeyedHashResponse {
    digest: Uint8Array;
}
export interface Blake3DeriveKeyRequest {
    context: Uint8Array;
    keyMaterial: Uint8Array;
}
export interface Blake3DeriveKeyResponse {
    digest: Uint8Array;
}
export interface SHA256HashRequest {
    data: Uint8Array;
}
export interface SHA256HashResponse {
    digest: Uint8Array;
}
export declare const Blake3HashRequest: {
    encode(message: Blake3HashRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3HashRequest;
    fromJSON(object: any): Blake3HashRequest;
    toJSON(message: Blake3HashRequest): unknown;
    fromPartial(object: DeepPartial<Blake3HashRequest>): Blake3HashRequest;
};
export declare const Blake3HashResponse: {
    encode(message: Blake3HashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3HashResponse;
    fromJSON(object: any): Blake3HashResponse;
    toJSON(message: Blake3HashResponse): unknown;
    fromPartial(object: DeepPartial<Blake3HashResponse>): Blake3HashResponse;
};
export declare const Blake3KeyedHashRequest: {
    encode(message: Blake3KeyedHashRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3KeyedHashRequest;
    fromJSON(object: any): Blake3KeyedHashRequest;
    toJSON(message: Blake3KeyedHashRequest): unknown;
    fromPartial(object: DeepPartial<Blake3KeyedHashRequest>): Blake3KeyedHashRequest;
};
export declare const Blake3KeyedHashResponse: {
    encode(message: Blake3KeyedHashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3KeyedHashResponse;
    fromJSON(object: any): Blake3KeyedHashResponse;
    toJSON(message: Blake3KeyedHashResponse): unknown;
    fromPartial(object: DeepPartial<Blake3KeyedHashResponse>): Blake3KeyedHashResponse;
};
export declare const Blake3DeriveKeyRequest: {
    encode(message: Blake3DeriveKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3DeriveKeyRequest;
    fromJSON(object: any): Blake3DeriveKeyRequest;
    toJSON(message: Blake3DeriveKeyRequest): unknown;
    fromPartial(object: DeepPartial<Blake3DeriveKeyRequest>): Blake3DeriveKeyRequest;
};
export declare const Blake3DeriveKeyResponse: {
    encode(message: Blake3DeriveKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blake3DeriveKeyResponse;
    fromJSON(object: any): Blake3DeriveKeyResponse;
    toJSON(message: Blake3DeriveKeyResponse): unknown;
    fromPartial(object: DeepPartial<Blake3DeriveKeyResponse>): Blake3DeriveKeyResponse;
};
export declare const SHA256HashRequest: {
    encode(message: SHA256HashRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SHA256HashRequest;
    fromJSON(object: any): SHA256HashRequest;
    toJSON(message: SHA256HashRequest): unknown;
    fromPartial(object: DeepPartial<SHA256HashRequest>): SHA256HashRequest;
};
export declare const SHA256HashResponse: {
    encode(message: SHA256HashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SHA256HashResponse;
    fromJSON(object: any): SHA256HashResponse;
    toJSON(message: SHA256HashResponse): unknown;
    fromPartial(object: DeepPartial<SHA256HashResponse>): SHA256HashResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
