"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataResponse = exports.MetadataRequest = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseMetadataRequest() {
    return {};
}
exports.MetadataRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMetadataRequest();
        return message;
    },
};
function createBaseMetadataResponse() {
    return {
        version: "",
        versionMajor: 0,
        versionMinor: 0,
        versionPatch: 0,
        targetFamily: "",
        targetOs: "",
        targetArch: "",
        targetVendor: "",
        targetEnv: "",
    };
}
exports.MetadataResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.versionMajor !== 0) {
            writer.uint32(16).int32(message.versionMajor);
        }
        if (message.versionMinor !== 0) {
            writer.uint32(24).int32(message.versionMinor);
        }
        if (message.versionPatch !== 0) {
            writer.uint32(32).int32(message.versionPatch);
        }
        if (message.targetFamily !== "") {
            writer.uint32(82).string(message.targetFamily);
        }
        if (message.targetOs !== "") {
            writer.uint32(90).string(message.targetOs);
        }
        if (message.targetArch !== "") {
            writer.uint32(98).string(message.targetArch);
        }
        if (message.targetVendor !== "") {
            writer.uint32(106).string(message.targetVendor);
        }
        if (message.targetEnv !== "") {
            writer.uint32(114).string(message.targetEnv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.version = reader.string();
                    break;
                case 2:
                    message.versionMajor = reader.int32();
                    break;
                case 3:
                    message.versionMinor = reader.int32();
                    break;
                case 4:
                    message.versionPatch = reader.int32();
                    break;
                case 10:
                    message.targetFamily = reader.string();
                    break;
                case 11:
                    message.targetOs = reader.string();
                    break;
                case 12:
                    message.targetArch = reader.string();
                    break;
                case 13:
                    message.targetVendor = reader.string();
                    break;
                case 14:
                    message.targetEnv = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? String(object.version) : "",
            versionMajor: isSet(object.versionMajor)
                ? Number(object.versionMajor)
                : 0,
            versionMinor: isSet(object.versionMinor)
                ? Number(object.versionMinor)
                : 0,
            versionPatch: isSet(object.versionPatch)
                ? Number(object.versionPatch)
                : 0,
            targetFamily: isSet(object.targetFamily)
                ? String(object.targetFamily)
                : "",
            targetOs: isSet(object.targetOs) ? String(object.targetOs) : "",
            targetArch: isSet(object.targetArch) ? String(object.targetArch) : "",
            targetVendor: isSet(object.targetVendor)
                ? String(object.targetVendor)
                : "",
            targetEnv: isSet(object.targetEnv) ? String(object.targetEnv) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.version !== undefined && (obj.version = message.version);
        message.versionMajor !== undefined &&
            (obj.versionMajor = Math.round(message.versionMajor));
        message.versionMinor !== undefined &&
            (obj.versionMinor = Math.round(message.versionMinor));
        message.versionPatch !== undefined &&
            (obj.versionPatch = Math.round(message.versionPatch));
        message.targetFamily !== undefined &&
            (obj.targetFamily = message.targetFamily);
        message.targetOs !== undefined && (obj.targetOs = message.targetOs);
        message.targetArch !== undefined && (obj.targetArch = message.targetArch);
        message.targetVendor !== undefined &&
            (obj.targetVendor = message.targetVendor);
        message.targetEnv !== undefined && (obj.targetEnv = message.targetEnv);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseMetadataResponse();
        message.version = (_a = object.version) !== null && _a !== void 0 ? _a : "";
        message.versionMajor = (_b = object.versionMajor) !== null && _b !== void 0 ? _b : 0;
        message.versionMinor = (_c = object.versionMinor) !== null && _c !== void 0 ? _c : 0;
        message.versionPatch = (_d = object.versionPatch) !== null && _d !== void 0 ? _d : 0;
        message.targetFamily = (_e = object.targetFamily) !== null && _e !== void 0 ? _e : "";
        message.targetOs = (_f = object.targetOs) !== null && _f !== void 0 ? _f : "";
        message.targetArch = (_g = object.targetArch) !== null && _g !== void 0 ? _g : "";
        message.targetVendor = (_h = object.targetVendor) !== null && _h !== void 0 ? _h : "";
        message.targetEnv = (_j = object.targetEnv) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=metadata.js.map