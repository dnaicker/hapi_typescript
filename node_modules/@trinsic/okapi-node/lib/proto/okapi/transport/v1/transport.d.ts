import { EncryptionMode, EncryptionAlgorithm, SignedMessage, EncryptedMessage } from "../../../pbmse/v1/pbmse";
import { JsonWebKey } from "../../keys/v1/keys";
import _m0 from "protobufjs/minimal";
export interface SignRequest {
    payload: Uint8Array;
    key: JsonWebKey | undefined;
    appendTo: SignedMessage | undefined;
}
export interface SignResponse {
    message: SignedMessage | undefined;
}
export interface VerifyRequest {
    message: SignedMessage | undefined;
    key: JsonWebKey | undefined;
}
export interface VerifyResponse {
    isValid: boolean;
}
export interface PackRequest {
    senderKey: JsonWebKey | undefined;
    receiverKey: JsonWebKey | undefined;
    associatedData: Uint8Array;
    plaintext: Uint8Array;
    mode: EncryptionMode;
    algorithm: EncryptionAlgorithm;
}
export interface PackResponse {
    message: EncryptedMessage | undefined;
}
export interface UnpackRequest {
    senderKey: JsonWebKey | undefined;
    receiverKey: JsonWebKey | undefined;
    message: EncryptedMessage | undefined;
}
export interface UnpackResponse {
    plaintext: Uint8Array;
}
export interface CoreMessage {
    id: string;
    type: string;
    body: Uint8Array;
    to: string[];
    from: string;
    created: number;
    expires: number;
}
export declare const SignRequest: {
    encode(message: SignRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignRequest;
    fromJSON(object: any): SignRequest;
    toJSON(message: SignRequest): unknown;
    fromPartial(object: DeepPartial<SignRequest>): SignRequest;
};
export declare const SignResponse: {
    encode(message: SignResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignResponse;
    fromJSON(object: any): SignResponse;
    toJSON(message: SignResponse): unknown;
    fromPartial(object: DeepPartial<SignResponse>): SignResponse;
};
export declare const VerifyRequest: {
    encode(message: VerifyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyRequest;
    fromJSON(object: any): VerifyRequest;
    toJSON(message: VerifyRequest): unknown;
    fromPartial(object: DeepPartial<VerifyRequest>): VerifyRequest;
};
export declare const VerifyResponse: {
    encode(message: VerifyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyResponse;
    fromJSON(object: any): VerifyResponse;
    toJSON(message: VerifyResponse): unknown;
    fromPartial(object: DeepPartial<VerifyResponse>): VerifyResponse;
};
export declare const PackRequest: {
    encode(message: PackRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PackRequest;
    fromJSON(object: any): PackRequest;
    toJSON(message: PackRequest): unknown;
    fromPartial(object: DeepPartial<PackRequest>): PackRequest;
};
export declare const PackResponse: {
    encode(message: PackResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PackResponse;
    fromJSON(object: any): PackResponse;
    toJSON(message: PackResponse): unknown;
    fromPartial(object: DeepPartial<PackResponse>): PackResponse;
};
export declare const UnpackRequest: {
    encode(message: UnpackRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnpackRequest;
    fromJSON(object: any): UnpackRequest;
    toJSON(message: UnpackRequest): unknown;
    fromPartial(object: DeepPartial<UnpackRequest>): UnpackRequest;
};
export declare const UnpackResponse: {
    encode(message: UnpackResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnpackResponse;
    fromJSON(object: any): UnpackResponse;
    toJSON(message: UnpackResponse): unknown;
    fromPartial(object: DeepPartial<UnpackResponse>): UnpackResponse;
};
export declare const CoreMessage: {
    encode(message: CoreMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CoreMessage;
    fromJSON(object: any): CoreMessage;
    toJSON(message: CoreMessage): unknown;
    fromPartial(object: DeepPartial<CoreMessage>): CoreMessage;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
