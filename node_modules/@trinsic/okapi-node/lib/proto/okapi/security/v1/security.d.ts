import _m0 from "protobufjs/minimal";
/**
 * messages related to the oberon protocol
 * See: https://github.com/mikelodder7/oberon
 */
/** Create an Oberon Compatible Secret Key */
export interface CreateOberonKeyRequest {
    /** optional seed to generate deterministic keys */
    seed: Uint8Array;
}
/** Contains the oberon secret key bytes */
export interface CreateOberonKeyResponse {
    /** raw secret key bytes */
    sk: Uint8Array;
    /** raw public key bytes */
    pk: Uint8Array;
}
/** Create a new oberon token */
export interface CreateOberonTokenRequest {
    /** raw BLS key bytes */
    sk: Uint8Array;
    /** data is the public part of the oberon protocol and can be any data */
    data: Uint8Array;
    /** optional blinding for the token */
    blinding: Uint8Array[];
}
/** Contains the token with optional blinding */
export interface CreateOberonTokenResponse {
    /** raw token bytes */
    token: Uint8Array;
}
/** Create a proof that holder knows the token */
export interface CreateOberonProofRequest {
    /** data used to create the token */
    data: Uint8Array;
    /** token data */
    token: Uint8Array;
    /** any blindings used to create the token */
    blinding: Uint8Array[];
    /** nonce for generating the proof */
    nonce: Uint8Array;
}
/** Contains the token proof */
export interface CreateOberonProofResponse {
    /** raw proof bytes */
    proof: Uint8Array;
}
/** Verify the presented proof is valid */
export interface VerifyOberonProofRequest {
    /** raw proof bytes returned from CreateProof */
    proof: Uint8Array;
    /** data used to create the token */
    data: Uint8Array;
    /** nonce used to generate the proof */
    nonce: Uint8Array;
    /** public key that was used to generate the token */
    pk: Uint8Array;
}
/** Contains the status of the proof validation */
export interface VerifyOberonProofResponse {
    /** whether the given proof was valid */
    valid: boolean;
}
/** Blind an oberon token */
export interface BlindOberonTokenRequest {
    /** raw token bytes */
    token: Uint8Array;
    /** blinding to apply to the token */
    blinding: Uint8Array[];
}
/** Contains the blinded token reply */
export interface BlindOberonTokenResponse {
    /** raw blinded token bytes */
    token: Uint8Array;
}
/** UnBlind an oberon token */
export interface UnBlindOberonTokenRequest {
    /** raw token bytes */
    token: Uint8Array;
    /** blinding to remove from the token */
    blinding: Uint8Array[];
}
/** Contains the unblinded token reply */
export interface UnBlindOberonTokenResponse {
    /** raw unblinded token bytes */
    token: Uint8Array;
}
/** Verify that an oberon token comes from the desired issuer */
export interface VerifyOberonTokenRequest {
    /** raw token bytes */
    token: Uint8Array;
    /** token is valid to this public key? */
    pk: Uint8Array;
    /** public part of oberon protocol - can be any data */
    data: Uint8Array;
}
/** Contains the verification result for the oberon token */
export interface VerifyOberonTokenResponse {
    /** token is valid to the public key */
    valid: boolean;
}
export declare const CreateOberonKeyRequest: {
    encode(message: CreateOberonKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonKeyRequest;
    fromJSON(object: any): CreateOberonKeyRequest;
    toJSON(message: CreateOberonKeyRequest): unknown;
    fromPartial(object: DeepPartial<CreateOberonKeyRequest>): CreateOberonKeyRequest;
};
export declare const CreateOberonKeyResponse: {
    encode(message: CreateOberonKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonKeyResponse;
    fromJSON(object: any): CreateOberonKeyResponse;
    toJSON(message: CreateOberonKeyResponse): unknown;
    fromPartial(object: DeepPartial<CreateOberonKeyResponse>): CreateOberonKeyResponse;
};
export declare const CreateOberonTokenRequest: {
    encode(message: CreateOberonTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonTokenRequest;
    fromJSON(object: any): CreateOberonTokenRequest;
    toJSON(message: CreateOberonTokenRequest): unknown;
    fromPartial(object: DeepPartial<CreateOberonTokenRequest>): CreateOberonTokenRequest;
};
export declare const CreateOberonTokenResponse: {
    encode(message: CreateOberonTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonTokenResponse;
    fromJSON(object: any): CreateOberonTokenResponse;
    toJSON(message: CreateOberonTokenResponse): unknown;
    fromPartial(object: DeepPartial<CreateOberonTokenResponse>): CreateOberonTokenResponse;
};
export declare const CreateOberonProofRequest: {
    encode(message: CreateOberonProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonProofRequest;
    fromJSON(object: any): CreateOberonProofRequest;
    toJSON(message: CreateOberonProofRequest): unknown;
    fromPartial(object: DeepPartial<CreateOberonProofRequest>): CreateOberonProofRequest;
};
export declare const CreateOberonProofResponse: {
    encode(message: CreateOberonProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOberonProofResponse;
    fromJSON(object: any): CreateOberonProofResponse;
    toJSON(message: CreateOberonProofResponse): unknown;
    fromPartial(object: DeepPartial<CreateOberonProofResponse>): CreateOberonProofResponse;
};
export declare const VerifyOberonProofRequest: {
    encode(message: VerifyOberonProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyOberonProofRequest;
    fromJSON(object: any): VerifyOberonProofRequest;
    toJSON(message: VerifyOberonProofRequest): unknown;
    fromPartial(object: DeepPartial<VerifyOberonProofRequest>): VerifyOberonProofRequest;
};
export declare const VerifyOberonProofResponse: {
    encode(message: VerifyOberonProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyOberonProofResponse;
    fromJSON(object: any): VerifyOberonProofResponse;
    toJSON(message: VerifyOberonProofResponse): unknown;
    fromPartial(object: DeepPartial<VerifyOberonProofResponse>): VerifyOberonProofResponse;
};
export declare const BlindOberonTokenRequest: {
    encode(message: BlindOberonTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlindOberonTokenRequest;
    fromJSON(object: any): BlindOberonTokenRequest;
    toJSON(message: BlindOberonTokenRequest): unknown;
    fromPartial(object: DeepPartial<BlindOberonTokenRequest>): BlindOberonTokenRequest;
};
export declare const BlindOberonTokenResponse: {
    encode(message: BlindOberonTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlindOberonTokenResponse;
    fromJSON(object: any): BlindOberonTokenResponse;
    toJSON(message: BlindOberonTokenResponse): unknown;
    fromPartial(object: DeepPartial<BlindOberonTokenResponse>): BlindOberonTokenResponse;
};
export declare const UnBlindOberonTokenRequest: {
    encode(message: UnBlindOberonTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnBlindOberonTokenRequest;
    fromJSON(object: any): UnBlindOberonTokenRequest;
    toJSON(message: UnBlindOberonTokenRequest): unknown;
    fromPartial(object: DeepPartial<UnBlindOberonTokenRequest>): UnBlindOberonTokenRequest;
};
export declare const UnBlindOberonTokenResponse: {
    encode(message: UnBlindOberonTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnBlindOberonTokenResponse;
    fromJSON(object: any): UnBlindOberonTokenResponse;
    toJSON(message: UnBlindOberonTokenResponse): unknown;
    fromPartial(object: DeepPartial<UnBlindOberonTokenResponse>): UnBlindOberonTokenResponse;
};
export declare const VerifyOberonTokenRequest: {
    encode(message: VerifyOberonTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyOberonTokenRequest;
    fromJSON(object: any): VerifyOberonTokenRequest;
    toJSON(message: VerifyOberonTokenRequest): unknown;
    fromPartial(object: DeepPartial<VerifyOberonTokenRequest>): VerifyOberonTokenRequest;
};
export declare const VerifyOberonTokenResponse: {
    encode(message: VerifyOberonTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyOberonTokenResponse;
    fromJSON(object: any): VerifyOberonTokenResponse;
    toJSON(message: VerifyOberonTokenResponse): unknown;
    fromPartial(object: DeepPartial<VerifyOberonTokenResponse>): VerifyOberonTokenResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
