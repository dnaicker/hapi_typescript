"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserProvider = void 0;
const okapi_web_1 = require("@trinsic/okapi-web");
const nice_grpc_web_1 = require("nice-grpc-web");
class BrowserProvider {
    async blake3HashRequest(requestData) {
        let requestHash = new Uint8Array();
        if (requestData.length > 0) {
            let hashResponse = await okapi_web_1.Hashing.blake3Hash({ data: requestData });
            requestHash = hashResponse.digest;
        }
        return requestHash;
    }
    async blindOberon(cloned, securityCode) {
        let response = await okapi_web_1.Oberon.blindToken({
            token: cloned.authToken,
            blinding: [securityCode],
        });
        return response.token;
    }
    async oberonProofRequest(profile, nonceUint8) {
        let proof = await okapi_web_1.Oberon.createProof({
            data: profile.authData,
            nonce: nonceUint8,
            token: profile.authToken,
            blinding: [],
        });
        return proof.proof;
    }
    async okapiVersion() {
        return (await okapi_web_1.OkapiMetadata.getMetadata()).version;
    }
    async unblindOberon(cloned, securityCode) {
        let response = await okapi_web_1.Oberon.unblindToken({
            token: cloned.authToken,
            blinding: [securityCode],
        });
        return response.token;
    }
    createGrpcClient(definition, address) {
        // @ts-ignore - compatible types, duplicate definitions
        return (0, nice_grpc_web_1.createClient)(definition, (0, nice_grpc_web_1.createChannel)(address));
    }
    metadataLanguage() {
        return "typescript-browser";
    }
}
exports.BrowserProvider = BrowserProvider;
//# sourceMappingURL=BrowserProvider.js.map