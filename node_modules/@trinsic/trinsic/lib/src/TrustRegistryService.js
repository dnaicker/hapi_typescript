"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustRegistryService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const proto_1 = require("./proto");
const proto = __importStar(require("./proto"));
class TrustRegistryService extends ServiceBase_1.default {
    constructor(options) {
        super(options);
        this.client = this.createClient(proto_1.TrustRegistryDefinition);
    }
    async search(request = proto_1.SearchRegistryRequest.fromPartial({
        query: "SELECT * FROM c OFFSET 0 LIMIT 100",
    })) {
        return this.searchRegistry(request);
    }
    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: /home/runner/work/sdk/sdk/web/src/TrustRegistryService.ts
    /** Add a governance framework to the ecosystem */
    async addFramework(request) {
        return this.client.addFramework(request, {
            metadata: await this.buildMetadata(proto.AddFrameworkRequest.encode(request).finish())
        });
    }
    /** Remove a governance framework from the ecosystem */
    async removeFramework(request) {
        return this.client.removeFramework(request, {
            metadata: await this.buildMetadata(proto.RemoveFrameworkRequest.encode(request).finish())
        });
    }
    /** Search the ecosystem's governance frameworks */
    async searchRegistry(request) {
        return this.client.searchRegistry(request, {
            metadata: await this.buildMetadata(proto.SearchRegistryRequest.encode(request).finish())
        });
    }
    /** Register an authoritative issuer for a credential schema */
    async registerMember(request) {
        return this.client.registerMember(request, {
            metadata: await this.buildMetadata(proto.RegisterMemberRequest.encode(request).finish())
        });
    }
    /** Removes an authoritative issuer for a credential schema from the trust registry */
    async unregisterMember(request) {
        return this.client.unregisterMember(request, {
            metadata: await this.buildMetadata(proto.UnregisterMemberRequest.encode(request).finish())
        });
    }
    /** Fetch the membership status of an issuer for a given credential schema in a trust registry */
    async getMembershipStatus(request) {
        return this.client.getMembershipStatus(request, {
            metadata: await this.buildMetadata(proto.GetMembershipStatusRequest.encode(request).finish())
        });
    }
}
exports.TrustRegistryService = TrustRegistryService;
//# sourceMappingURL=TrustRegistryService.js.map