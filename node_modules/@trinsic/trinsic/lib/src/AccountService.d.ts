import ServiceBase from "./ServiceBase";
import { AccountDefinition, AccountInfoResponse, AccountProfile, LoginRequest, LoginResponse, ServiceOptions, SignInRequest } from "./proto";
import * as proto from "./proto";
import type { Client as BrowserClient } from "nice-grpc-web";
export declare class AccountService extends ServiceBase {
    client: BrowserClient<typeof AccountDefinition>;
    constructor(options?: ServiceOptions);
    /**
     * protect the given profile
     * @param profile The profile to protect with oberon blinding
     * @param securityCode must be utf-8 encoded `UInt8Array`. `string` will be decoded to utf-8.
     */
    static protect(profile: string | AccountProfile, securityCode: string | Uint8Array): Promise<string>;
    /**
     * unprotect the given profile
     * @param profile The profile to unprotect with oberon blinding
     * @param securityCode must be utf-8 encoded `UInt8Array`. `string` will be decoded to utf-8.
     */
    static unprotect(profile: string | AccountProfile, securityCode: string | Uint8Array): Promise<string>;
    static convertToProfile(profile: string | AccountProfile): AccountProfile;
    static convertToToken(profile: string | AccountProfile): string;
    private static convertToUtf8;
    signIn(request?: SignInRequest): Promise<string>;
    login(request?: LoginRequest): Promise<LoginResponse>;
    loginConfirm(challenge: Uint8Array | undefined, authCode: string | Uint8Array): Promise<string>;
    loginAnonymous(ecosystemId?: string): Promise<string>;
    getInfo(): Promise<AccountInfoResponse>;
    /** Get account information */
    info(): Promise<proto.AccountInfoResponse>;
    /** List all connected devices */
    listDevices(request: proto.ListDevicesRequest): Promise<proto.ListDevicesResponse>;
    /** Revoke device access to the account's cloud wallet */
    revokeDevice(request: proto.RevokeDeviceRequest): Promise<proto.RevokeDeviceResponse>;
    /** Authorize Ecosystem to receive webhook events */
    authorizeWebhook(request: proto.AuthorizeWebhookRequest): Promise<proto.AuthorizeWebhookResponse>;
}
