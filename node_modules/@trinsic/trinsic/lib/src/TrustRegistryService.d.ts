import ServiceBase from "./ServiceBase";
import { SearchRegistryRequest, SearchRegistryResponse, ServiceOptions, TrustRegistryDefinition } from "./proto";
import * as proto from "./proto";
import type { Client as BrowserClient } from "nice-grpc-web";
export declare class TrustRegistryService extends ServiceBase {
    client: BrowserClient<typeof TrustRegistryDefinition>;
    constructor(options?: ServiceOptions);
    search(request?: SearchRegistryRequest): Promise<SearchRegistryResponse>;
    /** Add a governance framework to the ecosystem */
    addFramework(request: proto.AddFrameworkRequest): Promise<proto.AddFrameworkResponse>;
    /** Remove a governance framework from the ecosystem */
    removeFramework(request: proto.RemoveFrameworkRequest): Promise<proto.RemoveFrameworkResponse>;
    /** Search the ecosystem's governance frameworks */
    searchRegistry(request: proto.SearchRegistryRequest): Promise<proto.SearchRegistryResponse>;
    /** Register an authoritative issuer for a credential schema */
    registerMember(request: proto.RegisterMemberRequest): Promise<proto.RegisterMemberResponse>;
    /** Removes an authoritative issuer for a credential schema from the trust registry */
    unregisterMember(request: proto.UnregisterMemberRequest): Promise<proto.UnregisterMemberResponse>;
    /** Fetch the membership status of an issuer for a given credential schema in a trust registry */
    getMembershipStatus(request: proto.GetMembershipStatusRequest): Promise<proto.GetMembershipStatusResponse>;
}
