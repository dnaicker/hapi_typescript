"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const proto_1 = require("./proto");
const proto = __importStar(require("./proto"));
const js_base64_1 = require("js-base64");
class AccountService extends ServiceBase_1.default {
    constructor(options) {
        super(options);
        this.client = this.createClient(proto_1.AccountDefinition);
    }
    /**
     * protect the given profile
     * @param profile The profile to protect with oberon blinding
     * @param securityCode must be utf-8 encoded `UInt8Array`. `string` will be decoded to utf-8.
     */
    static async protect(profile, securityCode) {
        securityCode = AccountService.convertToUtf8(securityCode);
        profile = AccountService.convertToProfile(profile);
        let cloned = proto_1.AccountProfile.fromPartial(profile);
        const result = await ServiceBase_1.default.trinsicProvider.blindOberon(cloned, securityCode);
        cloned.authToken = result;
        cloned.protection = proto_1.TokenProtection.fromPartial({
            enabled: true,
            method: proto_1.ConfirmationMethod.Other,
        });
        return AccountService.convertToToken(cloned);
    }
    /**
     * unprotect the given profile
     * @param profile The profile to unprotect with oberon blinding
     * @param securityCode must be utf-8 encoded `UInt8Array`. `string` will be decoded to utf-8.
     */
    static async unprotect(profile, securityCode) {
        securityCode = AccountService.convertToUtf8(securityCode);
        profile = AccountService.convertToProfile(profile);
        let cloned = proto_1.AccountProfile.fromPartial(profile);
        const result = await ServiceBase_1.default.trinsicProvider.unblindOberon(cloned, securityCode);
        cloned.authToken = result;
        cloned.protection = proto_1.TokenProtection.fromPartial({
            enabled: false,
            method: proto_1.ConfirmationMethod.None,
        });
        return AccountService.convertToToken(cloned);
    }
    static convertToProfile(profile) {
        if (typeof profile == "string") {
            return proto_1.AccountProfile.decode(js_base64_1.Base64.toUint8Array(profile));
        }
        return profile;
    }
    static convertToToken(profile) {
        if (typeof profile == "string") {
            return profile;
        }
        return js_base64_1.Base64.fromUint8Array(proto_1.AccountProfile.encode(profile).finish(), true);
    }
    static convertToUtf8(securityCode) {
        if (typeof securityCode == "string") {
            return new TextEncoder().encode(securityCode);
        }
        else {
            return securityCode;
        }
    }
    async signIn(request = proto_1.SignInRequest.fromPartial({})) {
        request.ecosystemId || (request.ecosystemId = "default");
        let response = await this.client.signIn(request);
        const authToken = AccountService.convertToToken(response.profile);
        // set the auth token as active for the current service instance
        await this.tokenProvider.saveDefault(authToken);
        return authToken;
    }
    async login(request = proto_1.LoginRequest.fromPartial({})) {
        return this.client.login(request, {
            metadata: await this.buildMetadata(),
        });
    }
    async loginConfirm(challenge, authCode) {
        var _a, _b;
        if (typeof challenge === "undefined") {
            throw new TypeError("challenge must be a Uint8Array");
        }
        challenge = AccountService.convertToUtf8(challenge);
        authCode = AccountService.convertToUtf8(authCode);
        let digest = await ServiceBase_1.default.trinsicProvider.blake3HashRequest(authCode);
        let response = await this.client.loginConfirm({
            challenge: challenge,
            confirmationCodeHashed: digest,
        });
        if (response.profile === undefined) {
            return "";
        }
        let authToken = AccountService.convertToToken(response.profile);
        if ((_b = (_a = response.profile.protection) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : false) {
            authToken = await AccountService.unprotect(authToken, authCode);
        }
        // set the auth token as active for the current service instance
        await this.tokenProvider.saveDefault(authToken);
        return authToken;
    }
    async loginAnonymous(ecosystemId) {
        ecosystemId || (ecosystemId = "default");
        const request = proto_1.LoginRequest.fromPartial({
            email: "",
            invitationCode: "",
            ecosystemId: ecosystemId,
        });
        let response = await this.login(request);
        if (response.profile === undefined) {
            throw new Error("undefined profile returned");
        }
        if (response.profile.protection.enabled) {
            throw new Error("protected profile returned from login");
        }
        const authToken = AccountService.convertToToken(response.profile);
        await this.tokenProvider.saveDefault(authToken);
        return authToken;
    }
    async getInfo() {
        return await this.info();
    }
    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: /home/runner/work/sdk/sdk/web/src/AccountService.ts
    /** Get account information */
    async info() {
        let request = proto.AccountInfoRequest.fromPartial({});
        return this.client.info(request, {
            metadata: await this.buildMetadata(proto.AccountInfoRequest.encode(request).finish())
        });
    }
    /** List all connected devices */
    async listDevices(request) {
        return this.client.listDevices(request, {
            metadata: await this.buildMetadata(proto.ListDevicesRequest.encode(request).finish())
        });
    }
    /** Revoke device access to the account's cloud wallet */
    async revokeDevice(request) {
        return this.client.revokeDevice(request, {
            metadata: await this.buildMetadata(proto.RevokeDeviceRequest.encode(request).finish())
        });
    }
    /** Authorize Ecosystem to receive webhook events */
    async authorizeWebhook(request) {
        return this.client.authorizeWebhook(request, {
            metadata: await this.buildMetadata(proto.AuthorizeWebhookRequest.encode(request).finish())
        });
    }
}
exports.AccountService = AccountService;
//# sourceMappingURL=AccountService.js.map