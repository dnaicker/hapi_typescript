"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const proto_1 = require("./proto");
const proto = __importStar(require("./proto"));
class CredentialService extends ServiceBase_1.default {
    constructor(options) {
        super(options);
        this.client = this.createClient(proto_1.VerifiableCredentialDefinition);
    }
    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: /home/runner/work/sdk/sdk/web/src/CredentialService.ts
    /** Sign and issue a verifiable credential from a submitted document.
  * The document must be a valid JSON-LD document. */
    async issue(request) {
        return this.client.issue(request, {
            metadata: await this.buildMetadata(proto.IssueRequest.encode(request).finish())
        });
    }
    /** Sign and issue a verifiable credential from a pre-defined template.
  * This process will also add schema validation and
  * revocation registry values to the credential. */
    async issueFromTemplate(request) {
        return this.client.issueFromTemplate(request, {
            metadata: await this.buildMetadata(proto.IssueFromTemplateRequest.encode(request).finish())
        });
    }
    /** Check credential status in the revocation registry */
    async checkStatus(request) {
        return this.client.checkStatus(request, {
            metadata: await this.buildMetadata(proto.CheckStatusRequest.encode(request).finish())
        });
    }
    /** Update credential status by setting the revocation value */
    async updateStatus(request) {
        return this.client.updateStatus(request, {
            metadata: await this.buildMetadata(proto.UpdateStatusRequest.encode(request).finish())
        });
    }
    /** Create a proof from a signed document that is a valid
  * verifiable credential and contains a signature from which a proof can be derived. */
    async createProof(request) {
        return this.client.createProof(request, {
            metadata: await this.buildMetadata(proto.CreateProofRequest.encode(request).finish())
        });
    }
    /** Verifies a proof by checking the signature value, and if possible schema validation,
  * revocation status, and issuer status against a trust registry */
    async verifyProof(request) {
        return this.client.verifyProof(request, {
            metadata: await this.buildMetadata(proto.VerifyProofRequest.encode(request).finish())
        });
    }
    /** Sends a document directly to a user's email within the given ecosystem */
    async send(request) {
        return this.client.send(request, {
            metadata: await this.buildMetadata(proto.SendRequest.encode(request).finish())
        });
    }
}
exports.CredentialService = CredentialService;
//# sourceMappingURL=CredentialService.js.map