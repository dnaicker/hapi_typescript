import ServiceBase from "./ServiceBase";
import { ServiceOptions, VerifiableCredentialDefinition } from "./proto";
import * as proto from "./proto";
import type { Client as BrowserClient } from "nice-grpc-web";
export declare class CredentialService extends ServiceBase {
    client: BrowserClient<typeof VerifiableCredentialDefinition>;
    constructor(options?: ServiceOptions);
    /** Sign and issue a verifiable credential from a submitted document.
  * The document must be a valid JSON-LD document. */
    issue(request: proto.IssueRequest): Promise<proto.IssueResponse>;
    /** Sign and issue a verifiable credential from a pre-defined template.
  * This process will also add schema validation and
  * revocation registry values to the credential. */
    issueFromTemplate(request: proto.IssueFromTemplateRequest): Promise<proto.IssueFromTemplateResponse>;
    /** Check credential status in the revocation registry */
    checkStatus(request: proto.CheckStatusRequest): Promise<proto.CheckStatusResponse>;
    /** Update credential status by setting the revocation value */
    updateStatus(request: proto.UpdateStatusRequest): Promise<proto.UpdateStatusResponse>;
    /** Create a proof from a signed document that is a valid
  * verifiable credential and contains a signature from which a proof can be derived. */
    createProof(request: proto.CreateProofRequest): Promise<proto.CreateProofResponse>;
    /** Verifies a proof by checking the signature value, and if possible schema validation,
  * revocation status, and issuer status against a trust registry */
    verifyProof(request: proto.VerifyProofRequest): Promise<proto.VerifyProofResponse>;
    /** Sends a document directly to a user's email within the given ecosystem */
    send(request: proto.SendRequest): Promise<proto.SendResponse>;
}
