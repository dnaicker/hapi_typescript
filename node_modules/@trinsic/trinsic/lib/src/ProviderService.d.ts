import ServiceBase from "./ServiceBase";
import * as proto from "./proto";
import type { Client as BrowserClient } from "nice-grpc-web";
export declare class ProviderService extends ServiceBase {
    client: BrowserClient<typeof proto.ProviderDefinition>;
    constructor(options?: proto.ServiceOptions);
    createEcosystem(request: proto.CreateEcosystemRequest): Promise<proto.CreateEcosystemResponse>;
    /** Update an existing ecosystem */
    updateEcosystem(request: proto.UpdateEcosystemRequest): Promise<proto.UpdateEcosystemResponse>;
    /** Grant user authorization to ecosystem resources */
    grantAuthorization(request: proto.GrantAuthorizationRequest): Promise<proto.GrantAuthorizationResponse>;
    /** Revoke user authorization to ecosystem resources */
    revokeAuthorization(request: proto.RevokeAuthorizationRequest): Promise<proto.RevokeAuthorizationResponse>;
    /** Retrieve the list of permissions for this particular account/ecosystem */
    getAuthorizations(request: proto.GetAuthorizationsRequest): Promise<proto.GetAuthorizationsResponse>;
    /** Add a webhook endpoint to the ecosystem */
    addWebhook(request: proto.AddWebhookRequest): Promise<proto.AddWebhookResponse>;
    /** Delete a webhook endpoint from the ecosystem */
    deleteWebhook(request: proto.DeleteWebhookRequest): Promise<proto.DeleteWebhookResponse>;
    /** Get ecosystem information */
    ecosystemInfo(request: proto.EcosystemInfoRequest): Promise<proto.EcosystemInfoResponse>;
    /** Get public ecosystem information about *any* ecosystem */
    getPublicEcosystemInfo(request: proto.GetPublicEcosystemInfoRequest): Promise<proto.GetPublicEcosystemInfoResponse>;
    /** Generates an unprotected authentication token that can be used to
  * configure server side applications */
    generateToken(request: proto.GenerateTokenRequest): Promise<proto.GenerateTokenResponse>;
    /** Invite a user to the ecosystem */
    invite(request: proto.InviteRequest): Promise<proto.InviteResponse>;
    /** Check the status of an invitation */
    invitationStatus(request: proto.InvitationStatusRequest): Promise<proto.InvitationStatusResponse>;
    /** Returns the public key being used to create/verify oberon tokens */
    getOberonKey(request: proto.GetOberonKeyRequest): Promise<proto.GetOberonKeyResponse>;
    /** Generate a signed token (JWT) that can be used to connect to the message bus */
    getEventToken(request: proto.GetEventTokenRequest): Promise<proto.GetEventTokenResponse>;
    /** Upgrade a wallet's DID from `did:key` to another method */
    upgradeDID(request: proto.UpgradeDidRequest): Promise<proto.UpgradeDidResponse>;
    /** Retrieve a random hash TXT that can be used to verify domain ownership */
    retrieveDomainVerificationRecord(): Promise<proto.RetrieveDomainVerificationRecordResponse>;
    /** Call to verify domain */
    refreshDomainVerificationStatus(request: proto.RefreshDomainVerificationStatusRequest): Promise<proto.RefreshDomainVerificationStatusResponse>;
    /** Search for issuers/providers/verifiers in the current ecosystem */
    searchWalletConfigurations(request: proto.SearchWalletConfigurationsRequest): Promise<proto.SearchWalletConfigurationResponse>;
}
