import { ConfirmationMethod, AccountDetails, AccountProfile } from "../../account/v1/account";
import { SupportedDidMethod } from "../../common/v1/common";
import _m0 from "protobufjs/minimal";
/** Type of participant being invited to ecosystem */
export declare enum ParticipantType {
    /** participant_type_individual - Participant is an individual */
    participant_type_individual = 0,
    /** participant_type_organization - Participant is an organization */
    participant_type_organization = 1,
    UNRECOGNIZED = -1
}
export declare function participantTypeFromJSON(object: any): ParticipantType;
export declare function participantTypeToJSON(object: ParticipantType): string;
/** Request to invite a participant to an ecosystem */
export interface InviteRequest {
    /** Type of participant being invited (individual/organization) */
    participant: ParticipantType;
    /** Description of invitation */
    description: string;
    /** Account details of invitee */
    details: AccountDetails | undefined;
}
export interface InviteRequest_DidCommInvitation {
}
/** Response to `InviteRequest` */
export interface InviteResponse {
    /** ID of created invitation */
    invitationId: string;
    /** Invitation code -- must be passed back in `LoginRequest` */
    invitationCode: string;
}
/** Request details for the status of an invitation */
export interface InvitationStatusRequest {
    /** ID of invitation, received from `InviteResponse` */
    invitationId: string;
}
/** Response to `InvitationStatusRequest` */
export interface InvitationStatusResponse {
    /** Status of invitation */
    status: InvitationStatusResponse_Status;
    /** Human-readable string with details about invitation status */
    statusDetails: string;
}
export declare enum InvitationStatusResponse_Status {
    /** Error - Onboarding resulted in error */
    Error = 0,
    /** InvitationSent - The participant has been invited */
    InvitationSent = 1,
    /** Completed - The participant has been onboarded */
    Completed = 2,
    /** Expired - The invite has expired */
    Expired = 3,
    UNRECOGNIZED = -1
}
export declare function invitationStatusResponse_StatusFromJSON(object: any): InvitationStatusResponse_Status;
export declare function invitationStatusResponse_StatusToJSON(object: InvitationStatusResponse_Status): string;
/** Details of an ecosystem */
export interface Ecosystem {
    /** URN of the ecosystem */
    id: string;
    /** Globally unique name for the ecosystem */
    name: string;
    /** Ecosystem description */
    description: string;
    /**
     * External URL associated with the organization or ecosystem entity
     *
     * @deprecated
     */
    uri: string;
    /** Configured webhooks, if any */
    webhooks: WebhookConfig[];
    /** Display details */
    display: EcosystemDisplay | undefined;
    /** Domain */
    domain: string;
}
/** Webhook configured on an ecosystem */
export interface WebhookConfig {
    /** UUID of the webhook */
    id: string;
    /** HTTPS URL to POST webhook calls to */
    destinationUrl: string;
    /** Events the webhook is subscribed to */
    events: string[];
    /** Last known status of webhook (whether or not Trinsic can successfully reach destination) */
    status: string;
}
/** A grant authorizing `actions` on a `resourceId` */
export interface Grant {
    /** the urn of the resource */
    resourceId: string;
    /** list of actions that are allowed */
    actions: string[];
    /** any child grants */
    childGrants: Grant[];
}
/** Request to create an ecosystem */
export interface CreateEcosystemRequest {
    /**
     * Globally unique name for the Ecosystem. This name will be
     * part of the ecosystem-specific URLs and namespaces.
     * Allowed characters are lowercase letters, numbers, underscore and hyphen.
     * If not passed, ecosystem name will be auto-generated.
     */
    name: string;
    /** Ecosystem description */
    description: string;
    /**
     * External URL associated with your organization or ecosystem entity
     *
     * @deprecated
     */
    uri: string;
    /** The account details of the owner of the ecosystem */
    details: AccountDetails | undefined;
    /** New domain URL */
    domain: string;
}
/** Response to `CreateEcosystemRequest` */
export interface CreateEcosystemResponse {
    /** Details of the created ecosystem */
    ecosystem: Ecosystem | undefined;
    /** Account profile for auth of the owner of the ecosystem */
    profile: AccountProfile | undefined;
    /** Indicates if confirmation of account is required. */
    confirmationMethod: ConfirmationMethod;
}
/** Request to update an ecosystem's metadata */
export interface UpdateEcosystemRequest {
    /** New description of the ecosystem */
    description: string;
    /**
     * New external URL associated with the organization or ecosystem entity
     *
     * @deprecated
     */
    uri: string;
    /** New domain URL */
    domain: string;
    /** New name */
    name: string;
    /** Display details */
    display: EcosystemDisplay | undefined;
}
export interface EcosystemDisplay {
    dark: EcosystemDisplayDetails | undefined;
    light: EcosystemDisplayDetails | undefined;
}
export interface EcosystemDisplayDetails {
    /**
     * string id = 1;
     * string name = 2;
     */
    logoUrl: string;
    color: string;
}
/** Response to `UpdateEcosystemRequest` */
export interface UpdateEcosystemResponse {
    /** Current ecosystem metadata, post-update */
    Ecosystem: Ecosystem | undefined;
}
/** Request to add a webhook to an ecosystem */
export interface AddWebhookRequest {
    /**
     * Destination to post webhook calls to.
     * Must be a reachable HTTPS URL.
     */
    destinationUrl: string;
    /**
     * Secret string used for HMAC-SHA256 signing of webhook payloads
     * to verify that a webhook comes from Trinsic
     */
    secret: string;
    /** Events to subscribe to. Default is "*" (all events) */
    events: string[];
}
/** Response to `AddWebhookRequest` */
export interface AddWebhookResponse {
    /** Ecosystem data with new webhook */
    ecosystem: Ecosystem | undefined;
}
/** Request to delete a webhook from an ecosystem */
export interface DeleteWebhookRequest {
    /** ID of webhook to delete */
    webhookId: string;
}
/** Response to `DeleteWebhookRequest` */
export interface DeleteWebhookResponse {
    /** Ecosystem data after removal of webhook */
    ecosystem: Ecosystem | undefined;
}
/** Request to fetch information about an ecosystem */
export interface EcosystemInfoRequest {
}
/** Response to `InfoRequest` */
export interface EcosystemInfoResponse {
    /** Ecosystem corresponding to current ecosystem in the account token */
    ecosystem: Ecosystem | undefined;
}
/** Request to fetch information about an ecosystem */
export interface GetPublicEcosystemInfoRequest {
    ecosystemId: string;
}
/** Response to `InfoRequest` */
export interface GetPublicEcosystemInfoResponse {
    /** Ecosystem corresponding to requested `ecosystem_id` */
    ecosystem: PublicEcosystemInformation | undefined;
}
export interface PublicEcosystemInformation {
    /** Public name of this ecosystem */
    name: string;
    /** Public domain for the owner of this ecosystem */
    domain: string;
    /** Trinsic verified the domain is owned by the owner of this ecosystem */
    domainVerified: boolean;
    /** Style display information */
    styleDisplay: EcosystemDisplay | undefined;
}
/** Request to generate an authentication token for the current account */
export interface GenerateTokenRequest {
    /** Description to identify this token */
    description: string;
}
/** Response to `GenerateTokenRequest` */
export interface GenerateTokenResponse {
    /** Account authentication profile that contains unprotected token */
    profile: AccountProfile | undefined;
}
/**
 * Request to fetch the Trinsic public key used
 * to verify authentication token validity
 */
export interface GetOberonKeyRequest {
}
/** Response to `GetOberonKeyRequest` */
export interface GetOberonKeyResponse {
    /** Oberon Public Key as RAW base64-url encoded string */
    key: string;
}
/** Generates an events token bound to the provided ed25519 public key. */
export interface GetEventTokenRequest {
    /** Raw public key to generate event token for */
    pk: Uint8Array;
}
/**
 * Response message containing a token (JWT) that can be used
 * to connect directly to the message streaming architecture
 */
export interface GetEventTokenResponse {
    /** JWT bound to the public key provided in `GetEventTokenRequest` */
    token: string;
}
export interface RetrieveDomainVerificationRecordRequest {
}
/** Response message containing a TXT record content for domain url verification */
export interface RetrieveDomainVerificationRecordResponse {
    /** TXT code to use for domain verification */
    verificationTxt: string;
}
export interface RefreshDomainVerificationStatusRequest {
}
export interface RefreshDomainVerificationStatusResponse {
    /** Domain URL verified */
    domain: string;
    /** Specifies if the above `domain` was successfully verified */
    domainVerified: boolean;
}
/** Grant permissions to a resource or path in the ecosystem */
export interface GrantAuthorizationRequest {
    /**
     * Email address of account being granted permission.
     * Mutually exclusive with `walletId`.
     */
    email: string | undefined;
    /**
     * Wallet ID of account being granted permission.
     * Mutually exclusive with `email`.
     */
    walletId: string | undefined;
    /**
     * Resource string that account is receiving permissions for.
     * Resources are specified as a RESTful path: /{ecoId}/{resource type}/{resource id}. `ecoId` may be omitted.
     */
    resource: string;
    /** Action to authorize. Default is "*" (all) */
    action: string;
}
/** Response to `GrantAuthorizationRequest` */
export interface GrantAuthorizationResponse {
}
/** Revoke permissions to a resource or path in the ecosystem */
export interface RevokeAuthorizationRequest {
    /**
     * Email address of account having permission revoked.
     * Mutually exclusive with `walletId`.
     */
    email: string | undefined;
    /**
     * Wallet ID of account having permission revoked.
     * Mutually exclusive with `email`.
     */
    walletId: string | undefined;
    /**
     * Resource string that account is losing permissions for.
     * Resources are specified as a RESTful path: /{ecoId}/{resource type}/{resource id}. `ecoId` may be omitted.
     */
    resource: string;
    /** Action to revoke. Default is "*" (all) */
    action: string;
}
/** Response to `RevokeAuthorizationRequest` */
export interface RevokeAuthorizationResponse {
}
/**
 * Fetch list of grants that the current account has access to
 * in its ecosystem
 */
export interface GetAuthorizationsRequest {
}
/** Response to `GetAuthorizationsRequest` */
export interface GetAuthorizationsResponse {
    /** Grants attached to account */
    grants: Grant[];
}
/** Search for issuers/holders/verifiers */
export interface SearchWalletConfigurationsRequest {
    /** SQL filter to execute. `SELECT * FROM _ WHERE [**queryFilter**]` */
    queryFilter: string;
    /**
     * Token provided by previous `SearchResponse`
     * if more data is available for query
     */
    continuationToken: string;
}
export interface SearchWalletConfigurationResponse {
    /** Results matching the search query */
    results: WalletConfiguration[];
    /** Whether more results are available for this query via `continuation_token` */
    hasMore: boolean;
    /** Token to fetch next set of results via `SearchRequest` */
    continuationToken: string;
}
/** Strongly typed information about wallet configurations */
export interface WalletConfiguration {
    name: string;
    email: string;
    sms: string;
    walletId: string;
    publicDid: string;
}
/** Options for creation of DID on the ION network */
export interface IonOptions {
    /** ION network on which DID should be published */
    network: IonOptions_IonNetwork;
}
export declare enum IonOptions_IonNetwork {
    TestNet = 0,
    MainNet = 1,
    UNRECOGNIZED = -1
}
export declare function ionOptions_IonNetworkFromJSON(object: any): IonOptions_IonNetwork;
export declare function ionOptions_IonNetworkToJSON(object: IonOptions_IonNetwork): string;
/** Request to upgrade a wallet */
export interface UpgradeDidRequest {
    /**
     * Email address of account to upgrade.
     * Mutually exclusive with `walletId`.
     */
    email: string | undefined;
    /**
     * Wallet ID of account to upgrade.
     * Mutually exclusive with `email`.
     */
    walletId: string | undefined;
    /** DID Method to which wallet should be upgraded */
    method: SupportedDidMethod;
    /** Configuration for creation of DID on ION network */
    ionOptions: IonOptions | undefined;
}
/** Response to `UpgradeDIDRequest` */
export interface UpgradeDidResponse {
    /** New DID of wallet */
    did: string;
}
export declare const InviteRequest: {
    encode(message: InviteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InviteRequest;
    fromJSON(object: any): InviteRequest;
    toJSON(message: InviteRequest): unknown;
    fromPartial(object: DeepPartial<InviteRequest>): InviteRequest;
};
export declare const InviteRequest_DidCommInvitation: {
    encode(_: InviteRequest_DidCommInvitation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InviteRequest_DidCommInvitation;
    fromJSON(_: any): InviteRequest_DidCommInvitation;
    toJSON(_: InviteRequest_DidCommInvitation): unknown;
    fromPartial(_: DeepPartial<InviteRequest_DidCommInvitation>): InviteRequest_DidCommInvitation;
};
export declare const InviteResponse: {
    encode(message: InviteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InviteResponse;
    fromJSON(object: any): InviteResponse;
    toJSON(message: InviteResponse): unknown;
    fromPartial(object: DeepPartial<InviteResponse>): InviteResponse;
};
export declare const InvitationStatusRequest: {
    encode(message: InvitationStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InvitationStatusRequest;
    fromJSON(object: any): InvitationStatusRequest;
    toJSON(message: InvitationStatusRequest): unknown;
    fromPartial(object: DeepPartial<InvitationStatusRequest>): InvitationStatusRequest;
};
export declare const InvitationStatusResponse: {
    encode(message: InvitationStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InvitationStatusResponse;
    fromJSON(object: any): InvitationStatusResponse;
    toJSON(message: InvitationStatusResponse): unknown;
    fromPartial(object: DeepPartial<InvitationStatusResponse>): InvitationStatusResponse;
};
export declare const Ecosystem: {
    encode(message: Ecosystem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ecosystem;
    fromJSON(object: any): Ecosystem;
    toJSON(message: Ecosystem): unknown;
    fromPartial(object: DeepPartial<Ecosystem>): Ecosystem;
};
export declare const WebhookConfig: {
    encode(message: WebhookConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebhookConfig;
    fromJSON(object: any): WebhookConfig;
    toJSON(message: WebhookConfig): unknown;
    fromPartial(object: DeepPartial<WebhookConfig>): WebhookConfig;
};
export declare const Grant: {
    encode(message: Grant, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Grant;
    fromJSON(object: any): Grant;
    toJSON(message: Grant): unknown;
    fromPartial(object: DeepPartial<Grant>): Grant;
};
export declare const CreateEcosystemRequest: {
    encode(message: CreateEcosystemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateEcosystemRequest;
    fromJSON(object: any): CreateEcosystemRequest;
    toJSON(message: CreateEcosystemRequest): unknown;
    fromPartial(object: DeepPartial<CreateEcosystemRequest>): CreateEcosystemRequest;
};
export declare const CreateEcosystemResponse: {
    encode(message: CreateEcosystemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateEcosystemResponse;
    fromJSON(object: any): CreateEcosystemResponse;
    toJSON(message: CreateEcosystemResponse): unknown;
    fromPartial(object: DeepPartial<CreateEcosystemResponse>): CreateEcosystemResponse;
};
export declare const UpdateEcosystemRequest: {
    encode(message: UpdateEcosystemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEcosystemRequest;
    fromJSON(object: any): UpdateEcosystemRequest;
    toJSON(message: UpdateEcosystemRequest): unknown;
    fromPartial(object: DeepPartial<UpdateEcosystemRequest>): UpdateEcosystemRequest;
};
export declare const EcosystemDisplay: {
    encode(message: EcosystemDisplay, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemDisplay;
    fromJSON(object: any): EcosystemDisplay;
    toJSON(message: EcosystemDisplay): unknown;
    fromPartial(object: DeepPartial<EcosystemDisplay>): EcosystemDisplay;
};
export declare const EcosystemDisplayDetails: {
    encode(message: EcosystemDisplayDetails, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemDisplayDetails;
    fromJSON(object: any): EcosystemDisplayDetails;
    toJSON(message: EcosystemDisplayDetails): unknown;
    fromPartial(object: DeepPartial<EcosystemDisplayDetails>): EcosystemDisplayDetails;
};
export declare const UpdateEcosystemResponse: {
    encode(message: UpdateEcosystemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEcosystemResponse;
    fromJSON(object: any): UpdateEcosystemResponse;
    toJSON(message: UpdateEcosystemResponse): unknown;
    fromPartial(object: DeepPartial<UpdateEcosystemResponse>): UpdateEcosystemResponse;
};
export declare const AddWebhookRequest: {
    encode(message: AddWebhookRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddWebhookRequest;
    fromJSON(object: any): AddWebhookRequest;
    toJSON(message: AddWebhookRequest): unknown;
    fromPartial(object: DeepPartial<AddWebhookRequest>): AddWebhookRequest;
};
export declare const AddWebhookResponse: {
    encode(message: AddWebhookResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddWebhookResponse;
    fromJSON(object: any): AddWebhookResponse;
    toJSON(message: AddWebhookResponse): unknown;
    fromPartial(object: DeepPartial<AddWebhookResponse>): AddWebhookResponse;
};
export declare const DeleteWebhookRequest: {
    encode(message: DeleteWebhookRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWebhookRequest;
    fromJSON(object: any): DeleteWebhookRequest;
    toJSON(message: DeleteWebhookRequest): unknown;
    fromPartial(object: DeepPartial<DeleteWebhookRequest>): DeleteWebhookRequest;
};
export declare const DeleteWebhookResponse: {
    encode(message: DeleteWebhookResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWebhookResponse;
    fromJSON(object: any): DeleteWebhookResponse;
    toJSON(message: DeleteWebhookResponse): unknown;
    fromPartial(object: DeepPartial<DeleteWebhookResponse>): DeleteWebhookResponse;
};
export declare const EcosystemInfoRequest: {
    encode(_: EcosystemInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemInfoRequest;
    fromJSON(_: any): EcosystemInfoRequest;
    toJSON(_: EcosystemInfoRequest): unknown;
    fromPartial(_: DeepPartial<EcosystemInfoRequest>): EcosystemInfoRequest;
};
export declare const EcosystemInfoResponse: {
    encode(message: EcosystemInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemInfoResponse;
    fromJSON(object: any): EcosystemInfoResponse;
    toJSON(message: EcosystemInfoResponse): unknown;
    fromPartial(object: DeepPartial<EcosystemInfoResponse>): EcosystemInfoResponse;
};
export declare const GetPublicEcosystemInfoRequest: {
    encode(message: GetPublicEcosystemInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPublicEcosystemInfoRequest;
    fromJSON(object: any): GetPublicEcosystemInfoRequest;
    toJSON(message: GetPublicEcosystemInfoRequest): unknown;
    fromPartial(object: DeepPartial<GetPublicEcosystemInfoRequest>): GetPublicEcosystemInfoRequest;
};
export declare const GetPublicEcosystemInfoResponse: {
    encode(message: GetPublicEcosystemInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPublicEcosystemInfoResponse;
    fromJSON(object: any): GetPublicEcosystemInfoResponse;
    toJSON(message: GetPublicEcosystemInfoResponse): unknown;
    fromPartial(object: DeepPartial<GetPublicEcosystemInfoResponse>): GetPublicEcosystemInfoResponse;
};
export declare const PublicEcosystemInformation: {
    encode(message: PublicEcosystemInformation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublicEcosystemInformation;
    fromJSON(object: any): PublicEcosystemInformation;
    toJSON(message: PublicEcosystemInformation): unknown;
    fromPartial(object: DeepPartial<PublicEcosystemInformation>): PublicEcosystemInformation;
};
export declare const GenerateTokenRequest: {
    encode(message: GenerateTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenerateTokenRequest;
    fromJSON(object: any): GenerateTokenRequest;
    toJSON(message: GenerateTokenRequest): unknown;
    fromPartial(object: DeepPartial<GenerateTokenRequest>): GenerateTokenRequest;
};
export declare const GenerateTokenResponse: {
    encode(message: GenerateTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenerateTokenResponse;
    fromJSON(object: any): GenerateTokenResponse;
    toJSON(message: GenerateTokenResponse): unknown;
    fromPartial(object: DeepPartial<GenerateTokenResponse>): GenerateTokenResponse;
};
export declare const GetOberonKeyRequest: {
    encode(_: GetOberonKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOberonKeyRequest;
    fromJSON(_: any): GetOberonKeyRequest;
    toJSON(_: GetOberonKeyRequest): unknown;
    fromPartial(_: DeepPartial<GetOberonKeyRequest>): GetOberonKeyRequest;
};
export declare const GetOberonKeyResponse: {
    encode(message: GetOberonKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOberonKeyResponse;
    fromJSON(object: any): GetOberonKeyResponse;
    toJSON(message: GetOberonKeyResponse): unknown;
    fromPartial(object: DeepPartial<GetOberonKeyResponse>): GetOberonKeyResponse;
};
export declare const GetEventTokenRequest: {
    encode(message: GetEventTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetEventTokenRequest;
    fromJSON(object: any): GetEventTokenRequest;
    toJSON(message: GetEventTokenRequest): unknown;
    fromPartial(object: DeepPartial<GetEventTokenRequest>): GetEventTokenRequest;
};
export declare const GetEventTokenResponse: {
    encode(message: GetEventTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetEventTokenResponse;
    fromJSON(object: any): GetEventTokenResponse;
    toJSON(message: GetEventTokenResponse): unknown;
    fromPartial(object: DeepPartial<GetEventTokenResponse>): GetEventTokenResponse;
};
export declare const RetrieveDomainVerificationRecordRequest: {
    encode(_: RetrieveDomainVerificationRecordRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetrieveDomainVerificationRecordRequest;
    fromJSON(_: any): RetrieveDomainVerificationRecordRequest;
    toJSON(_: RetrieveDomainVerificationRecordRequest): unknown;
    fromPartial(_: DeepPartial<RetrieveDomainVerificationRecordRequest>): RetrieveDomainVerificationRecordRequest;
};
export declare const RetrieveDomainVerificationRecordResponse: {
    encode(message: RetrieveDomainVerificationRecordResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetrieveDomainVerificationRecordResponse;
    fromJSON(object: any): RetrieveDomainVerificationRecordResponse;
    toJSON(message: RetrieveDomainVerificationRecordResponse): unknown;
    fromPartial(object: DeepPartial<RetrieveDomainVerificationRecordResponse>): RetrieveDomainVerificationRecordResponse;
};
export declare const RefreshDomainVerificationStatusRequest: {
    encode(_: RefreshDomainVerificationStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RefreshDomainVerificationStatusRequest;
    fromJSON(_: any): RefreshDomainVerificationStatusRequest;
    toJSON(_: RefreshDomainVerificationStatusRequest): unknown;
    fromPartial(_: DeepPartial<RefreshDomainVerificationStatusRequest>): RefreshDomainVerificationStatusRequest;
};
export declare const RefreshDomainVerificationStatusResponse: {
    encode(message: RefreshDomainVerificationStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RefreshDomainVerificationStatusResponse;
    fromJSON(object: any): RefreshDomainVerificationStatusResponse;
    toJSON(message: RefreshDomainVerificationStatusResponse): unknown;
    fromPartial(object: DeepPartial<RefreshDomainVerificationStatusResponse>): RefreshDomainVerificationStatusResponse;
};
export declare const GrantAuthorizationRequest: {
    encode(message: GrantAuthorizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorizationRequest;
    fromJSON(object: any): GrantAuthorizationRequest;
    toJSON(message: GrantAuthorizationRequest): unknown;
    fromPartial(object: DeepPartial<GrantAuthorizationRequest>): GrantAuthorizationRequest;
};
export declare const GrantAuthorizationResponse: {
    encode(_: GrantAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorizationResponse;
    fromJSON(_: any): GrantAuthorizationResponse;
    toJSON(_: GrantAuthorizationResponse): unknown;
    fromPartial(_: DeepPartial<GrantAuthorizationResponse>): GrantAuthorizationResponse;
};
export declare const RevokeAuthorizationRequest: {
    encode(message: RevokeAuthorizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAuthorizationRequest;
    fromJSON(object: any): RevokeAuthorizationRequest;
    toJSON(message: RevokeAuthorizationRequest): unknown;
    fromPartial(object: DeepPartial<RevokeAuthorizationRequest>): RevokeAuthorizationRequest;
};
export declare const RevokeAuthorizationResponse: {
    encode(_: RevokeAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAuthorizationResponse;
    fromJSON(_: any): RevokeAuthorizationResponse;
    toJSON(_: RevokeAuthorizationResponse): unknown;
    fromPartial(_: DeepPartial<RevokeAuthorizationResponse>): RevokeAuthorizationResponse;
};
export declare const GetAuthorizationsRequest: {
    encode(_: GetAuthorizationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuthorizationsRequest;
    fromJSON(_: any): GetAuthorizationsRequest;
    toJSON(_: GetAuthorizationsRequest): unknown;
    fromPartial(_: DeepPartial<GetAuthorizationsRequest>): GetAuthorizationsRequest;
};
export declare const GetAuthorizationsResponse: {
    encode(message: GetAuthorizationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuthorizationsResponse;
    fromJSON(object: any): GetAuthorizationsResponse;
    toJSON(message: GetAuthorizationsResponse): unknown;
    fromPartial(object: DeepPartial<GetAuthorizationsResponse>): GetAuthorizationsResponse;
};
export declare const SearchWalletConfigurationsRequest: {
    encode(message: SearchWalletConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchWalletConfigurationsRequest;
    fromJSON(object: any): SearchWalletConfigurationsRequest;
    toJSON(message: SearchWalletConfigurationsRequest): unknown;
    fromPartial(object: DeepPartial<SearchWalletConfigurationsRequest>): SearchWalletConfigurationsRequest;
};
export declare const SearchWalletConfigurationResponse: {
    encode(message: SearchWalletConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchWalletConfigurationResponse;
    fromJSON(object: any): SearchWalletConfigurationResponse;
    toJSON(message: SearchWalletConfigurationResponse): unknown;
    fromPartial(object: DeepPartial<SearchWalletConfigurationResponse>): SearchWalletConfigurationResponse;
};
export declare const WalletConfiguration: {
    encode(message: WalletConfiguration, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WalletConfiguration;
    fromJSON(object: any): WalletConfiguration;
    toJSON(message: WalletConfiguration): unknown;
    fromPartial(object: DeepPartial<WalletConfiguration>): WalletConfiguration;
};
export declare const IonOptions: {
    encode(message: IonOptions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IonOptions;
    fromJSON(object: any): IonOptions;
    toJSON(message: IonOptions): unknown;
    fromPartial(object: DeepPartial<IonOptions>): IonOptions;
};
export declare const UpgradeDidRequest: {
    encode(message: UpgradeDidRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpgradeDidRequest;
    fromJSON(object: any): UpgradeDidRequest;
    toJSON(message: UpgradeDidRequest): unknown;
    fromPartial(object: DeepPartial<UpgradeDidRequest>): UpgradeDidRequest;
};
export declare const UpgradeDidResponse: {
    encode(message: UpgradeDidResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpgradeDidResponse;
    fromJSON(object: any): UpgradeDidResponse;
    toJSON(message: UpgradeDidResponse): unknown;
    fromPartial(object: DeepPartial<UpgradeDidResponse>): UpgradeDidResponse;
};
export declare type ProviderDefinition = typeof ProviderDefinition;
export declare const ProviderDefinition: {
    readonly name: "Provider";
    readonly fullName: "services.provider.v1.Provider";
    readonly methods: {
        /** Create new ecosystem and assign the authenticated user as owner */
        readonly createEcosystem: {
            readonly name: "CreateEcosystem";
            readonly requestType: {
                encode(message: CreateEcosystemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateEcosystemRequest;
                fromJSON(object: any): CreateEcosystemRequest;
                toJSON(message: CreateEcosystemRequest): unknown;
                fromPartial(object: DeepPartial<CreateEcosystemRequest>): CreateEcosystemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CreateEcosystemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateEcosystemResponse;
                fromJSON(object: any): CreateEcosystemResponse;
                toJSON(message: CreateEcosystemResponse): unknown;
                fromPartial(object: DeepPartial<CreateEcosystemResponse>): CreateEcosystemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Update an existing ecosystem */
        readonly updateEcosystem: {
            readonly name: "UpdateEcosystem";
            readonly requestType: {
                encode(message: UpdateEcosystemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEcosystemRequest;
                fromJSON(object: any): UpdateEcosystemRequest;
                toJSON(message: UpdateEcosystemRequest): unknown;
                fromPartial(object: DeepPartial<UpdateEcosystemRequest>): UpdateEcosystemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UpdateEcosystemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEcosystemResponse;
                fromJSON(object: any): UpdateEcosystemResponse;
                toJSON(message: UpdateEcosystemResponse): unknown;
                fromPartial(object: DeepPartial<UpdateEcosystemResponse>): UpdateEcosystemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Grant user authorization to ecosystem resources */
        readonly grantAuthorization: {
            readonly name: "GrantAuthorization";
            readonly requestType: {
                encode(message: GrantAuthorizationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorizationRequest;
                fromJSON(object: any): GrantAuthorizationRequest;
                toJSON(message: GrantAuthorizationRequest): unknown;
                fromPartial(object: DeepPartial<GrantAuthorizationRequest>): GrantAuthorizationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: GrantAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GrantAuthorizationResponse;
                fromJSON(_: any): GrantAuthorizationResponse;
                toJSON(_: GrantAuthorizationResponse): unknown;
                fromPartial(_: DeepPartial<GrantAuthorizationResponse>): GrantAuthorizationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Revoke user authorization to ecosystem resources */
        readonly revokeAuthorization: {
            readonly name: "RevokeAuthorization";
            readonly requestType: {
                encode(message: RevokeAuthorizationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAuthorizationRequest;
                fromJSON(object: any): RevokeAuthorizationRequest;
                toJSON(message: RevokeAuthorizationRequest): unknown;
                fromPartial(object: DeepPartial<RevokeAuthorizationRequest>): RevokeAuthorizationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: RevokeAuthorizationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RevokeAuthorizationResponse;
                fromJSON(_: any): RevokeAuthorizationResponse;
                toJSON(_: RevokeAuthorizationResponse): unknown;
                fromPartial(_: DeepPartial<RevokeAuthorizationResponse>): RevokeAuthorizationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Retrieve the list of permissions for this particular account/ecosystem */
        readonly getAuthorizations: {
            readonly name: "GetAuthorizations";
            readonly requestType: {
                encode(_: GetAuthorizationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetAuthorizationsRequest;
                fromJSON(_: any): GetAuthorizationsRequest;
                toJSON(_: GetAuthorizationsRequest): unknown;
                fromPartial(_: DeepPartial<GetAuthorizationsRequest>): GetAuthorizationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetAuthorizationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetAuthorizationsResponse;
                fromJSON(object: any): GetAuthorizationsResponse;
                toJSON(message: GetAuthorizationsResponse): unknown;
                fromPartial(object: DeepPartial<GetAuthorizationsResponse>): GetAuthorizationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Add a webhook endpoint to the ecosystem */
        readonly addWebhook: {
            readonly name: "AddWebhook";
            readonly requestType: {
                encode(message: AddWebhookRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddWebhookRequest;
                fromJSON(object: any): AddWebhookRequest;
                toJSON(message: AddWebhookRequest): unknown;
                fromPartial(object: DeepPartial<AddWebhookRequest>): AddWebhookRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AddWebhookResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddWebhookResponse;
                fromJSON(object: any): AddWebhookResponse;
                toJSON(message: AddWebhookResponse): unknown;
                fromPartial(object: DeepPartial<AddWebhookResponse>): AddWebhookResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Delete a webhook endpoint from the ecosystem */
        readonly deleteWebhook: {
            readonly name: "DeleteWebhook";
            readonly requestType: {
                encode(message: DeleteWebhookRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWebhookRequest;
                fromJSON(object: any): DeleteWebhookRequest;
                toJSON(message: DeleteWebhookRequest): unknown;
                fromPartial(object: DeepPartial<DeleteWebhookRequest>): DeleteWebhookRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: DeleteWebhookResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWebhookResponse;
                fromJSON(object: any): DeleteWebhookResponse;
                toJSON(message: DeleteWebhookResponse): unknown;
                fromPartial(object: DeepPartial<DeleteWebhookResponse>): DeleteWebhookResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get ecosystem information */
        readonly ecosystemInfo: {
            readonly name: "EcosystemInfo";
            readonly requestType: {
                encode(_: EcosystemInfoRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemInfoRequest;
                fromJSON(_: any): EcosystemInfoRequest;
                toJSON(_: EcosystemInfoRequest): unknown;
                fromPartial(_: DeepPartial<EcosystemInfoRequest>): EcosystemInfoRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EcosystemInfoResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EcosystemInfoResponse;
                fromJSON(object: any): EcosystemInfoResponse;
                toJSON(message: EcosystemInfoResponse): unknown;
                fromPartial(object: DeepPartial<EcosystemInfoResponse>): EcosystemInfoResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get public ecosystem information about *any* ecosystem */
        readonly getPublicEcosystemInfo: {
            readonly name: "GetPublicEcosystemInfo";
            readonly requestType: {
                encode(message: GetPublicEcosystemInfoRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetPublicEcosystemInfoRequest;
                fromJSON(object: any): GetPublicEcosystemInfoRequest;
                toJSON(message: GetPublicEcosystemInfoRequest): unknown;
                fromPartial(object: DeepPartial<GetPublicEcosystemInfoRequest>): GetPublicEcosystemInfoRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetPublicEcosystemInfoResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetPublicEcosystemInfoResponse;
                fromJSON(object: any): GetPublicEcosystemInfoResponse;
                toJSON(message: GetPublicEcosystemInfoResponse): unknown;
                fromPartial(object: DeepPartial<GetPublicEcosystemInfoResponse>): GetPublicEcosystemInfoResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Generates an unprotected authentication token that can be used to
         * configure server side applications
         */
        readonly generateToken: {
            readonly name: "GenerateToken";
            readonly requestType: {
                encode(message: GenerateTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenerateTokenRequest;
                fromJSON(object: any): GenerateTokenRequest;
                toJSON(message: GenerateTokenRequest): unknown;
                fromPartial(object: DeepPartial<GenerateTokenRequest>): GenerateTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GenerateTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GenerateTokenResponse;
                fromJSON(object: any): GenerateTokenResponse;
                toJSON(message: GenerateTokenResponse): unknown;
                fromPartial(object: DeepPartial<GenerateTokenResponse>): GenerateTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Invite a user to the ecosystem */
        readonly invite: {
            readonly name: "Invite";
            readonly requestType: {
                encode(message: InviteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InviteRequest;
                fromJSON(object: any): InviteRequest;
                toJSON(message: InviteRequest): unknown;
                fromPartial(object: DeepPartial<InviteRequest>): InviteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: InviteResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InviteResponse;
                fromJSON(object: any): InviteResponse;
                toJSON(message: InviteResponse): unknown;
                fromPartial(object: DeepPartial<InviteResponse>): InviteResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Check the status of an invitation */
        readonly invitationStatus: {
            readonly name: "InvitationStatus";
            readonly requestType: {
                encode(message: InvitationStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InvitationStatusRequest;
                fromJSON(object: any): InvitationStatusRequest;
                toJSON(message: InvitationStatusRequest): unknown;
                fromPartial(object: DeepPartial<InvitationStatusRequest>): InvitationStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: InvitationStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InvitationStatusResponse;
                fromJSON(object: any): InvitationStatusResponse;
                toJSON(message: InvitationStatusResponse): unknown;
                fromPartial(object: DeepPartial<InvitationStatusResponse>): InvitationStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns the public key being used to create/verify oberon tokens */
        readonly getOberonKey: {
            readonly name: "GetOberonKey";
            readonly requestType: {
                encode(_: GetOberonKeyRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetOberonKeyRequest;
                fromJSON(_: any): GetOberonKeyRequest;
                toJSON(_: GetOberonKeyRequest): unknown;
                fromPartial(_: DeepPartial<GetOberonKeyRequest>): GetOberonKeyRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetOberonKeyResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetOberonKeyResponse;
                fromJSON(object: any): GetOberonKeyResponse;
                toJSON(message: GetOberonKeyResponse): unknown;
                fromPartial(object: DeepPartial<GetOberonKeyResponse>): GetOberonKeyResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Generate a signed token (JWT) that can be used to connect to the message bus */
        readonly getEventToken: {
            readonly name: "GetEventToken";
            readonly requestType: {
                encode(message: GetEventTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetEventTokenRequest;
                fromJSON(object: any): GetEventTokenRequest;
                toJSON(message: GetEventTokenRequest): unknown;
                fromPartial(object: DeepPartial<GetEventTokenRequest>): GetEventTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetEventTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetEventTokenResponse;
                fromJSON(object: any): GetEventTokenResponse;
                toJSON(message: GetEventTokenResponse): unknown;
                fromPartial(object: DeepPartial<GetEventTokenResponse>): GetEventTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Upgrade a wallet's DID from `did:key` to another method */
        readonly upgradeDID: {
            readonly name: "UpgradeDID";
            readonly requestType: {
                encode(message: UpgradeDidRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpgradeDidRequest;
                fromJSON(object: any): UpgradeDidRequest;
                toJSON(message: UpgradeDidRequest): unknown;
                fromPartial(object: DeepPartial<UpgradeDidRequest>): UpgradeDidRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UpgradeDidResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpgradeDidResponse;
                fromJSON(object: any): UpgradeDidResponse;
                toJSON(message: UpgradeDidResponse): unknown;
                fromPartial(object: DeepPartial<UpgradeDidResponse>): UpgradeDidResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Retrieve a random hash TXT that can be used to verify domain ownership */
        readonly retrieveDomainVerificationRecord: {
            readonly name: "RetrieveDomainVerificationRecord";
            readonly requestType: {
                encode(_: RetrieveDomainVerificationRecordRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RetrieveDomainVerificationRecordRequest;
                fromJSON(_: any): RetrieveDomainVerificationRecordRequest;
                toJSON(_: RetrieveDomainVerificationRecordRequest): unknown;
                fromPartial(_: DeepPartial<RetrieveDomainVerificationRecordRequest>): RetrieveDomainVerificationRecordRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: RetrieveDomainVerificationRecordResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RetrieveDomainVerificationRecordResponse;
                fromJSON(object: any): RetrieveDomainVerificationRecordResponse;
                toJSON(message: RetrieveDomainVerificationRecordResponse): unknown;
                fromPartial(object: DeepPartial<RetrieveDomainVerificationRecordResponse>): RetrieveDomainVerificationRecordResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Call to verify domain */
        readonly refreshDomainVerificationStatus: {
            readonly name: "RefreshDomainVerificationStatus";
            readonly requestType: {
                encode(_: RefreshDomainVerificationStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RefreshDomainVerificationStatusRequest;
                fromJSON(_: any): RefreshDomainVerificationStatusRequest;
                toJSON(_: RefreshDomainVerificationStatusRequest): unknown;
                fromPartial(_: DeepPartial<RefreshDomainVerificationStatusRequest>): RefreshDomainVerificationStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: RefreshDomainVerificationStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RefreshDomainVerificationStatusResponse;
                fromJSON(object: any): RefreshDomainVerificationStatusResponse;
                toJSON(message: RefreshDomainVerificationStatusResponse): unknown;
                fromPartial(object: DeepPartial<RefreshDomainVerificationStatusResponse>): RefreshDomainVerificationStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search for issuers/providers/verifiers in the current ecosystem */
        readonly searchWalletConfigurations: {
            readonly name: "SearchWalletConfigurations";
            readonly requestType: {
                encode(message: SearchWalletConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchWalletConfigurationsRequest;
                fromJSON(object: any): SearchWalletConfigurationsRequest;
                toJSON(message: SearchWalletConfigurationsRequest): unknown;
                fromPartial(object: DeepPartial<SearchWalletConfigurationsRequest>): SearchWalletConfigurationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SearchWalletConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchWalletConfigurationResponse;
                fromJSON(object: any): SearchWalletConfigurationResponse;
                toJSON(message: SearchWalletConfigurationResponse): unknown;
                fromPartial(object: DeepPartial<SearchWalletConfigurationResponse>): SearchWalletConfigurationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
