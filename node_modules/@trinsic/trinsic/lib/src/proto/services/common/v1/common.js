"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nonce = exports.supportedDidMethodToJSON = exports.supportedDidMethodFromJSON = exports.SupportedDidMethod = exports.responseStatusToJSON = exports.responseStatusFromJSON = exports.ResponseStatus = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
var ResponseStatus;
(function (ResponseStatus) {
    ResponseStatus[ResponseStatus["SUCCESS"] = 0] = "SUCCESS";
    ResponseStatus[ResponseStatus["WALLET_ACCESS_DENIED"] = 10] = "WALLET_ACCESS_DENIED";
    ResponseStatus[ResponseStatus["WALLET_EXISTS"] = 11] = "WALLET_EXISTS";
    ResponseStatus[ResponseStatus["ITEM_NOT_FOUND"] = 20] = "ITEM_NOT_FOUND";
    ResponseStatus[ResponseStatus["SERIALIZATION_ERROR"] = 200] = "SERIALIZATION_ERROR";
    ResponseStatus[ResponseStatus["UNKNOWN_ERROR"] = 100] = "UNKNOWN_ERROR";
    ResponseStatus[ResponseStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseStatus = exports.ResponseStatus || (exports.ResponseStatus = {}));
function responseStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "SUCCESS":
            return ResponseStatus.SUCCESS;
        case 10:
        case "WALLET_ACCESS_DENIED":
            return ResponseStatus.WALLET_ACCESS_DENIED;
        case 11:
        case "WALLET_EXISTS":
            return ResponseStatus.WALLET_EXISTS;
        case 20:
        case "ITEM_NOT_FOUND":
            return ResponseStatus.ITEM_NOT_FOUND;
        case 200:
        case "SERIALIZATION_ERROR":
            return ResponseStatus.SERIALIZATION_ERROR;
        case 100:
        case "UNKNOWN_ERROR":
            return ResponseStatus.UNKNOWN_ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ResponseStatus.UNRECOGNIZED;
    }
}
exports.responseStatusFromJSON = responseStatusFromJSON;
function responseStatusToJSON(object) {
    switch (object) {
        case ResponseStatus.SUCCESS:
            return "SUCCESS";
        case ResponseStatus.WALLET_ACCESS_DENIED:
            return "WALLET_ACCESS_DENIED";
        case ResponseStatus.WALLET_EXISTS:
            return "WALLET_EXISTS";
        case ResponseStatus.ITEM_NOT_FOUND:
            return "ITEM_NOT_FOUND";
        case ResponseStatus.SERIALIZATION_ERROR:
            return "SERIALIZATION_ERROR";
        case ResponseStatus.UNKNOWN_ERROR:
            return "UNKNOWN_ERROR";
        case ResponseStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.responseStatusToJSON = responseStatusToJSON;
/** Enum of all supported DID Methods */
var SupportedDidMethod;
(function (SupportedDidMethod) {
    /** KEY - The did:key method -- all wallets use this by default */
    SupportedDidMethod[SupportedDidMethod["KEY"] = 0] = "KEY";
    /** ION - The did:ion method */
    SupportedDidMethod[SupportedDidMethod["ION"] = 1] = "ION";
    SupportedDidMethod[SupportedDidMethod["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SupportedDidMethod = exports.SupportedDidMethod || (exports.SupportedDidMethod = {}));
function supportedDidMethodFromJSON(object) {
    switch (object) {
        case 0:
        case "KEY":
            return SupportedDidMethod.KEY;
        case 1:
        case "ION":
            return SupportedDidMethod.ION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SupportedDidMethod.UNRECOGNIZED;
    }
}
exports.supportedDidMethodFromJSON = supportedDidMethodFromJSON;
function supportedDidMethodToJSON(object) {
    switch (object) {
        case SupportedDidMethod.KEY:
            return "KEY";
        case SupportedDidMethod.ION:
            return "ION";
        case SupportedDidMethod.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.supportedDidMethodToJSON = supportedDidMethodToJSON;
function createBaseNonce() {
    return { timestamp: 0, requestHash: new Uint8Array() };
}
exports.Nonce = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.timestamp !== 0) {
            writer.uint32(8).int64(message.timestamp);
        }
        if (message.requestHash.length !== 0) {
            writer.uint32(18).bytes(message.requestHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonce();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = longToNumber(reader.int64());
                    break;
                case 2:
                    message.requestHash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
            requestHash: isSet(object.requestHash)
                ? bytesFromBase64(object.requestHash)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined &&
            (obj.timestamp = Math.round(message.timestamp));
        message.requestHash !== undefined &&
            (obj.requestHash = base64FromBytes(message.requestHash !== undefined
                ? message.requestHash
                : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNonce();
        message.timestamp = (_a = object.timestamp) !== null && _a !== void 0 ? _a : 0;
        message.requestHash = (_b = object.requestHash) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=common.js.map