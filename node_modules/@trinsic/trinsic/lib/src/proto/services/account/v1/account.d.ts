import _m0 from "protobufjs/minimal";
/** Confirmation method type for two-factor workflows */
export declare enum ConfirmationMethod {
    /** None - No confirmation required */
    None = 0,
    /** Email - Email confirmation required */
    Email = 1,
    /** Sms - SMS confirmation required */
    Sms = 2,
    /** ConnectedDevice - Confirmation from a connected device is required */
    ConnectedDevice = 3,
    /** Other - Third-party method of confirmation is required */
    Other = 10,
    UNRECOGNIZED = -1
}
export declare function confirmationMethodFromJSON(object: any): ConfirmationMethod;
export declare function confirmationMethodToJSON(object: ConfirmationMethod): string;
/** Request for creating or signing into an account */
export interface SignInRequest {
    /** Account registration details */
    details: AccountDetails | undefined;
    /** Invitation code associated with this registration */
    invitationCode: string;
    /**
     * ID of Ecosystem to use
     * Ignored if `invitation_code` is passed
     */
    ecosystemId: string;
}
/** Account registration details */
export interface AccountDetails {
    /** Account name */
    name: string;
    /** Email address of account */
    email: string;
    /** SMS number including country code */
    sms: string;
}
/**
 * Response for creating new account
 * This object will indicate if a confirmation code
 * was sent to one of the users two-factor methods
 * like email, SMS, etc.
 */
export interface SignInResponse {
    /** Indicates if confirmation of account is required. */
    confirmationMethod: ConfirmationMethod;
    /**
     * Contains authentication data for use with the current device.
     * This object must be stored in a secure place. It can also be
     * protected with a PIN, but this is optional.
     * See the docs at https://docs.trinsic.id for more information
     * on working with authentication data.
     */
    profile: AccountProfile | undefined;
}
/**
 * Device profile containing sensitive authentication data.
 * This information should be stored securely
 */
export interface AccountProfile {
    /**
     * The type of profile, used to differentiate between
     * protocol schemes or versions
     */
    profileType: string;
    /** Auth data containg information about the current device access */
    authData: Uint8Array;
    /** Secure token issued by server used to generate zero-knowledge proofs */
    authToken: Uint8Array;
    /**
     * Token security information about the token.
     * If token protection is enabled, implementations must supply
     * protection secret before using the token for authentication.
     */
    protection: TokenProtection | undefined;
}
/** Token protection info */
export interface TokenProtection {
    /**
     * Indicates if token is protected using a PIN,
     * security code, HSM secret, etc.
     */
    enabled: boolean;
    /** The method used to protect the token */
    method: ConfirmationMethod;
}
/** Request for information about the account used to make the request */
export interface AccountInfoRequest {
}
/** Information about the account used to make the request */
export interface AccountInfoResponse {
    /**
     * The account details associated with
     * the calling request context
     */
    details: AccountDetails | undefined;
    /**
     * Use `ecosystem_id` instead
     *
     * @deprecated
     */
    ecosystems: AccountEcosystem[];
    /** The wallet ID associated with this account */
    walletId: string;
    /** The device ID associated with this account session */
    deviceId: string;
    /** The ecosystem ID within which this account resides */
    ecosystemId: string;
    /**
     * The public DID associated with this account.
     * This DID is used as the `issuer` when signing verifiable credentials
     */
    publicDid: string;
    /** Webhook events, if any, this wallet has authorized */
    authorizedWebhooks: string[];
}
export interface ListDevicesRequest {
}
export interface ListDevicesResponse {
}
export interface RevokeDeviceRequest {
}
export interface RevokeDeviceResponse {
}
/** Deprecated */
export interface AccountEcosystem {
    id: string;
    name: string;
    description: string;
    uri: string;
}
/** Request to begin login flow */
export interface LoginRequest {
    /** Email address of account. If unspecified, an anonymous account will be created. */
    email: string;
    /** Invitation code associated with this registration */
    invitationCode: string;
    /**
     * ID of Ecosystem to sign into.
     * Ignored if `invitation_code` is passed.
     */
    ecosystemId: string;
}
/** Response to `LoginRequest` */
export interface LoginResponse {
    /**
     * Random byte sequence unique to this login request.
     * If present, two-factor confirmation of login is required.
     * Must be sent back, unaltered, in `LoginConfirm`.
     */
    challenge: Uint8Array | undefined;
    /** Account profile response. If present, no confirmation of login is required. */
    profile: AccountProfile | undefined;
}
/** Request to finalize login flow */
export interface LoginConfirmRequest {
    /** Challenge received from `Login` */
    challenge: Uint8Array;
    /**
     * Two-factor confirmation code sent to account email or phone,
     * hashed using Blake3. Our SDKs will handle this hashing process for you.
     */
    confirmationCodeHashed: Uint8Array;
}
/** Response to `LoginConfirmRequest` */
export interface LoginConfirmResponse {
    /**
     * Profile response; must be unprotected using unhashed confirmation code.
     * Our SDKs will handle this process for you, and return to you an authentication token string.
     */
    profile: AccountProfile | undefined;
}
/**
 * Request to authorize Ecosystem provider to receive webhooks for events
 * which occur on this wallet.
 */
export interface AuthorizeWebhookRequest {
    /** Events to authorize access to. Default is "*" (all events) */
    events: string[];
}
/** Response to `AuthorizeWebhookRequest` */
export interface AuthorizeWebhookResponse {
}
export declare const SignInRequest: {
    encode(message: SignInRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignInRequest;
    fromJSON(object: any): SignInRequest;
    toJSON(message: SignInRequest): unknown;
    fromPartial(object: DeepPartial<SignInRequest>): SignInRequest;
};
export declare const AccountDetails: {
    encode(message: AccountDetails, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountDetails;
    fromJSON(object: any): AccountDetails;
    toJSON(message: AccountDetails): unknown;
    fromPartial(object: DeepPartial<AccountDetails>): AccountDetails;
};
export declare const SignInResponse: {
    encode(message: SignInResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SignInResponse;
    fromJSON(object: any): SignInResponse;
    toJSON(message: SignInResponse): unknown;
    fromPartial(object: DeepPartial<SignInResponse>): SignInResponse;
};
export declare const AccountProfile: {
    encode(message: AccountProfile, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountProfile;
    fromJSON(object: any): AccountProfile;
    toJSON(message: AccountProfile): unknown;
    fromPartial(object: DeepPartial<AccountProfile>): AccountProfile;
};
export declare const TokenProtection: {
    encode(message: TokenProtection, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TokenProtection;
    fromJSON(object: any): TokenProtection;
    toJSON(message: TokenProtection): unknown;
    fromPartial(object: DeepPartial<TokenProtection>): TokenProtection;
};
export declare const AccountInfoRequest: {
    encode(_: AccountInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountInfoRequest;
    fromJSON(_: any): AccountInfoRequest;
    toJSON(_: AccountInfoRequest): unknown;
    fromPartial(_: DeepPartial<AccountInfoRequest>): AccountInfoRequest;
};
export declare const AccountInfoResponse: {
    encode(message: AccountInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountInfoResponse;
    fromJSON(object: any): AccountInfoResponse;
    toJSON(message: AccountInfoResponse): unknown;
    fromPartial(object: DeepPartial<AccountInfoResponse>): AccountInfoResponse;
};
export declare const ListDevicesRequest: {
    encode(_: ListDevicesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListDevicesRequest;
    fromJSON(_: any): ListDevicesRequest;
    toJSON(_: ListDevicesRequest): unknown;
    fromPartial(_: DeepPartial<ListDevicesRequest>): ListDevicesRequest;
};
export declare const ListDevicesResponse: {
    encode(_: ListDevicesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListDevicesResponse;
    fromJSON(_: any): ListDevicesResponse;
    toJSON(_: ListDevicesResponse): unknown;
    fromPartial(_: DeepPartial<ListDevicesResponse>): ListDevicesResponse;
};
export declare const RevokeDeviceRequest: {
    encode(_: RevokeDeviceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeDeviceRequest;
    fromJSON(_: any): RevokeDeviceRequest;
    toJSON(_: RevokeDeviceRequest): unknown;
    fromPartial(_: DeepPartial<RevokeDeviceRequest>): RevokeDeviceRequest;
};
export declare const RevokeDeviceResponse: {
    encode(_: RevokeDeviceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevokeDeviceResponse;
    fromJSON(_: any): RevokeDeviceResponse;
    toJSON(_: RevokeDeviceResponse): unknown;
    fromPartial(_: DeepPartial<RevokeDeviceResponse>): RevokeDeviceResponse;
};
export declare const AccountEcosystem: {
    encode(message: AccountEcosystem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountEcosystem;
    fromJSON(object: any): AccountEcosystem;
    toJSON(message: AccountEcosystem): unknown;
    fromPartial(object: DeepPartial<AccountEcosystem>): AccountEcosystem;
};
export declare const LoginRequest: {
    encode(message: LoginRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginRequest;
    fromJSON(object: any): LoginRequest;
    toJSON(message: LoginRequest): unknown;
    fromPartial(object: DeepPartial<LoginRequest>): LoginRequest;
};
export declare const LoginResponse: {
    encode(message: LoginResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginResponse;
    fromJSON(object: any): LoginResponse;
    toJSON(message: LoginResponse): unknown;
    fromPartial(object: DeepPartial<LoginResponse>): LoginResponse;
};
export declare const LoginConfirmRequest: {
    encode(message: LoginConfirmRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginConfirmRequest;
    fromJSON(object: any): LoginConfirmRequest;
    toJSON(message: LoginConfirmRequest): unknown;
    fromPartial(object: DeepPartial<LoginConfirmRequest>): LoginConfirmRequest;
};
export declare const LoginConfirmResponse: {
    encode(message: LoginConfirmResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginConfirmResponse;
    fromJSON(object: any): LoginConfirmResponse;
    toJSON(message: LoginConfirmResponse): unknown;
    fromPartial(object: DeepPartial<LoginConfirmResponse>): LoginConfirmResponse;
};
export declare const AuthorizeWebhookRequest: {
    encode(message: AuthorizeWebhookRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthorizeWebhookRequest;
    fromJSON(object: any): AuthorizeWebhookRequest;
    toJSON(message: AuthorizeWebhookRequest): unknown;
    fromPartial(object: DeepPartial<AuthorizeWebhookRequest>): AuthorizeWebhookRequest;
};
export declare const AuthorizeWebhookResponse: {
    encode(_: AuthorizeWebhookResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthorizeWebhookResponse;
    fromJSON(_: any): AuthorizeWebhookResponse;
    toJSON(_: AuthorizeWebhookResponse): unknown;
    fromPartial(_: DeepPartial<AuthorizeWebhookResponse>): AuthorizeWebhookResponse;
};
export declare type AccountDefinition = typeof AccountDefinition;
export declare const AccountDefinition: {
    readonly name: "Account";
    readonly fullName: "services.account.v1.Account";
    readonly methods: {
        /**
         * Sign in to an already existing account
         *
         * @deprecated
         */
        readonly signIn: {
            readonly name: "SignIn";
            readonly requestType: {
                encode(message: SignInRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SignInRequest;
                fromJSON(object: any): SignInRequest;
                toJSON(message: SignInRequest): unknown;
                fromPartial(object: DeepPartial<SignInRequest>): SignInRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SignInResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SignInResponse;
                fromJSON(object: any): SignInResponse;
                toJSON(message: SignInResponse): unknown;
                fromPartial(object: DeepPartial<SignInResponse>): SignInResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Begin login flow for specified account, creating one if it does not already exist */
        readonly login: {
            readonly name: "Login";
            readonly requestType: {
                encode(message: LoginRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoginRequest;
                fromJSON(object: any): LoginRequest;
                toJSON(message: LoginRequest): unknown;
                fromPartial(object: DeepPartial<LoginRequest>): LoginRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LoginResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoginResponse;
                fromJSON(object: any): LoginResponse;
                toJSON(message: LoginResponse): unknown;
                fromPartial(object: DeepPartial<LoginResponse>): LoginResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Finalize login flow with two-factor confirmation code */
        readonly loginConfirm: {
            readonly name: "LoginConfirm";
            readonly requestType: {
                encode(message: LoginConfirmRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoginConfirmRequest;
                fromJSON(object: any): LoginConfirmRequest;
                toJSON(message: LoginConfirmRequest): unknown;
                fromPartial(object: DeepPartial<LoginConfirmRequest>): LoginConfirmRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LoginConfirmResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoginConfirmResponse;
                fromJSON(object: any): LoginConfirmResponse;
                toJSON(message: LoginConfirmResponse): unknown;
                fromPartial(object: DeepPartial<LoginConfirmResponse>): LoginConfirmResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get account information */
        readonly info: {
            readonly name: "Info";
            readonly requestType: {
                encode(_: AccountInfoRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AccountInfoRequest;
                fromJSON(_: any): AccountInfoRequest;
                toJSON(_: AccountInfoRequest): unknown;
                fromPartial(_: DeepPartial<AccountInfoRequest>): AccountInfoRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AccountInfoResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AccountInfoResponse;
                fromJSON(object: any): AccountInfoResponse;
                toJSON(message: AccountInfoResponse): unknown;
                fromPartial(object: DeepPartial<AccountInfoResponse>): AccountInfoResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List all connected devices */
        readonly listDevices: {
            readonly name: "ListDevices";
            readonly requestType: {
                encode(_: ListDevicesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListDevicesRequest;
                fromJSON(_: any): ListDevicesRequest;
                toJSON(_: ListDevicesRequest): unknown;
                fromPartial(_: DeepPartial<ListDevicesRequest>): ListDevicesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: ListDevicesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListDevicesResponse;
                fromJSON(_: any): ListDevicesResponse;
                toJSON(_: ListDevicesResponse): unknown;
                fromPartial(_: DeepPartial<ListDevicesResponse>): ListDevicesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Revoke device access to the account's cloud wallet */
        readonly revokeDevice: {
            readonly name: "RevokeDevice";
            readonly requestType: {
                encode(_: RevokeDeviceRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RevokeDeviceRequest;
                fromJSON(_: any): RevokeDeviceRequest;
                toJSON(_: RevokeDeviceRequest): unknown;
                fromPartial(_: DeepPartial<RevokeDeviceRequest>): RevokeDeviceRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: RevokeDeviceResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RevokeDeviceResponse;
                fromJSON(_: any): RevokeDeviceResponse;
                toJSON(_: RevokeDeviceResponse): unknown;
                fromPartial(_: DeepPartial<RevokeDeviceResponse>): RevokeDeviceResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Authorize Ecosystem to receive webhook events */
        readonly authorizeWebhook: {
            readonly name: "AuthorizeWebhook";
            readonly requestType: {
                encode(message: AuthorizeWebhookRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthorizeWebhookRequest;
                fromJSON(object: any): AuthorizeWebhookRequest;
                toJSON(message: AuthorizeWebhookRequest): unknown;
                fromPartial(object: DeepPartial<AuthorizeWebhookRequest>): AuthorizeWebhookRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: AuthorizeWebhookResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthorizeWebhookResponse;
                fromJSON(_: any): AuthorizeWebhookResponse;
                toJSON(_: AuthorizeWebhookResponse): unknown;
                fromPartial(_: DeepPartial<AuthorizeWebhookResponse>): AuthorizeWebhookResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
