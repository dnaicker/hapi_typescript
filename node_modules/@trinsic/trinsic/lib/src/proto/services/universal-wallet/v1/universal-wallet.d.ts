import _m0 from "protobufjs/minimal";
/** Request to search items in wallet */
export interface SearchRequest {
    /** SQL Query to execute against items in wallet */
    query: string;
    /**
     * Token provided by previous `SearchResponse`
     * if more data is available for query
     */
    continuationToken: string;
}
/** Response to `SearchRequest` */
export interface SearchResponse {
    /** Array of query results, as JSON strings */
    items: string[];
    /** Whether more results are available for this query via `continuation_token` */
    hasMore: boolean;
    /** Token to fetch next set of results via `SearchRequest` */
    continuationToken: string;
}
/** Request to fetch an item from wallet */
export interface GetItemRequest {
    /** ID of item in wallet */
    itemId: string;
}
/** Response to `GetItemRequest` */
export interface GetItemResponse {
    /** Item data as a JSON string */
    itemJson: string;
    /** Type of item specified when item was inserted into wallet */
    itemType: string;
}
/** Request to update item in wallet */
export interface UpdateItemRequest {
    /** ID of item in wallet */
    itemId: string;
    /** Item type (ex. "VerifiableCredential") */
    itemType: string;
}
/** Response to `UpdateItemRequest` */
export interface UpdateItemResponse {
}
/** Request to insert a JSON document into a wallet */
export interface InsertItemRequest {
    /** Document to insert; must be stringified JSON */
    itemJson: string;
    /** Item type (ex. "VerifiableCredential") */
    itemType: string;
}
/** Response to `InsertItemRequest` */
export interface InsertItemResponse {
    /** ID of item inserted into wallet */
    itemId: string;
}
/** Request to delete an item in a wallet */
export interface DeleteItemRequest {
    /** ID of item to delete */
    itemId: string;
}
/** Response to `DeleteItemRequest` */
export interface DeleteItemResponse {
}
export declare const SearchRequest: {
    encode(message: SearchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchRequest;
    fromJSON(object: any): SearchRequest;
    toJSON(message: SearchRequest): unknown;
    fromPartial(object: DeepPartial<SearchRequest>): SearchRequest;
};
export declare const SearchResponse: {
    encode(message: SearchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchResponse;
    fromJSON(object: any): SearchResponse;
    toJSON(message: SearchResponse): unknown;
    fromPartial(object: DeepPartial<SearchResponse>): SearchResponse;
};
export declare const GetItemRequest: {
    encode(message: GetItemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetItemRequest;
    fromJSON(object: any): GetItemRequest;
    toJSON(message: GetItemRequest): unknown;
    fromPartial(object: DeepPartial<GetItemRequest>): GetItemRequest;
};
export declare const GetItemResponse: {
    encode(message: GetItemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetItemResponse;
    fromJSON(object: any): GetItemResponse;
    toJSON(message: GetItemResponse): unknown;
    fromPartial(object: DeepPartial<GetItemResponse>): GetItemResponse;
};
export declare const UpdateItemRequest: {
    encode(message: UpdateItemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateItemRequest;
    fromJSON(object: any): UpdateItemRequest;
    toJSON(message: UpdateItemRequest): unknown;
    fromPartial(object: DeepPartial<UpdateItemRequest>): UpdateItemRequest;
};
export declare const UpdateItemResponse: {
    encode(_: UpdateItemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateItemResponse;
    fromJSON(_: any): UpdateItemResponse;
    toJSON(_: UpdateItemResponse): unknown;
    fromPartial(_: DeepPartial<UpdateItemResponse>): UpdateItemResponse;
};
export declare const InsertItemRequest: {
    encode(message: InsertItemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InsertItemRequest;
    fromJSON(object: any): InsertItemRequest;
    toJSON(message: InsertItemRequest): unknown;
    fromPartial(object: DeepPartial<InsertItemRequest>): InsertItemRequest;
};
export declare const InsertItemResponse: {
    encode(message: InsertItemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InsertItemResponse;
    fromJSON(object: any): InsertItemResponse;
    toJSON(message: InsertItemResponse): unknown;
    fromPartial(object: DeepPartial<InsertItemResponse>): InsertItemResponse;
};
export declare const DeleteItemRequest: {
    encode(message: DeleteItemRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteItemRequest;
    fromJSON(object: any): DeleteItemRequest;
    toJSON(message: DeleteItemRequest): unknown;
    fromPartial(object: DeepPartial<DeleteItemRequest>): DeleteItemRequest;
};
export declare const DeleteItemResponse: {
    encode(_: DeleteItemResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteItemResponse;
    fromJSON(_: any): DeleteItemResponse;
    toJSON(_: DeleteItemResponse): unknown;
    fromPartial(_: DeepPartial<DeleteItemResponse>): DeleteItemResponse;
};
export declare type UniversalWalletDefinition = typeof UniversalWalletDefinition;
export declare const UniversalWalletDefinition: {
    readonly name: "UniversalWallet";
    readonly fullName: "services.universalwallet.v1.UniversalWallet";
    readonly methods: {
        /** Retrieve an item from the wallet with a given item identifier */
        readonly getItem: {
            readonly name: "GetItem";
            readonly requestType: {
                encode(message: GetItemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetItemRequest;
                fromJSON(object: any): GetItemRequest;
                toJSON(message: GetItemRequest): unknown;
                fromPartial(object: DeepPartial<GetItemRequest>): GetItemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetItemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetItemResponse;
                fromJSON(object: any): GetItemResponse;
                toJSON(message: GetItemResponse): unknown;
                fromPartial(object: DeepPartial<GetItemResponse>): GetItemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search the wallet using a SQL syntax */
        readonly search: {
            readonly name: "Search";
            readonly requestType: {
                encode(message: SearchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchRequest;
                fromJSON(object: any): SearchRequest;
                toJSON(message: SearchRequest): unknown;
                fromPartial(object: DeepPartial<SearchRequest>): SearchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SearchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchResponse;
                fromJSON(object: any): SearchResponse;
                toJSON(message: SearchResponse): unknown;
                fromPartial(object: DeepPartial<SearchResponse>): SearchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Insert an item into the wallet */
        readonly insertItem: {
            readonly name: "InsertItem";
            readonly requestType: {
                encode(message: InsertItemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InsertItemRequest;
                fromJSON(object: any): InsertItemRequest;
                toJSON(message: InsertItemRequest): unknown;
                fromPartial(object: DeepPartial<InsertItemRequest>): InsertItemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: InsertItemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InsertItemResponse;
                fromJSON(object: any): InsertItemResponse;
                toJSON(message: InsertItemResponse): unknown;
                fromPartial(object: DeepPartial<InsertItemResponse>): InsertItemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Update an item in the wallet */
        readonly updateItem: {
            readonly name: "UpdateItem";
            readonly requestType: {
                encode(message: UpdateItemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateItemRequest;
                fromJSON(object: any): UpdateItemRequest;
                toJSON(message: UpdateItemRequest): unknown;
                fromPartial(object: DeepPartial<UpdateItemRequest>): UpdateItemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: UpdateItemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateItemResponse;
                fromJSON(_: any): UpdateItemResponse;
                toJSON(_: UpdateItemResponse): unknown;
                fromPartial(_: DeepPartial<UpdateItemResponse>): UpdateItemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Delete an item from the wallet permanently */
        readonly deleteItem: {
            readonly name: "DeleteItem";
            readonly requestType: {
                encode(message: DeleteItemRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteItemRequest;
                fromJSON(object: any): DeleteItemRequest;
                toJSON(message: DeleteItemRequest): unknown;
                fromPartial(object: DeepPartial<DeleteItemRequest>): DeleteItemRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: DeleteItemResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DeleteItemResponse;
                fromJSON(_: any): DeleteItemResponse;
                toJSON(_: DeleteItemResponse): unknown;
                fromPartial(_: DeepPartial<DeleteItemResponse>): DeleteItemResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
