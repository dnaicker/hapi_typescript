"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkTemplateOption = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseSdkTemplateOption() {
    return { anonymous: false, ignore: false, noArguments: false };
}
exports.SdkTemplateOption = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.anonymous === true) {
            writer.uint32(8).bool(message.anonymous);
        }
        if (message.ignore === true) {
            writer.uint32(16).bool(message.ignore);
        }
        if (message.noArguments === true) {
            writer.uint32(24).bool(message.noArguments);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdkTemplateOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.anonymous = reader.bool();
                    break;
                case 2:
                    message.ignore = reader.bool();
                    break;
                case 3:
                    message.noArguments = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            anonymous: isSet(object.anonymous) ? Boolean(object.anonymous) : false,
            ignore: isSet(object.ignore) ? Boolean(object.ignore) : false,
            noArguments: isSet(object.noArguments)
                ? Boolean(object.noArguments)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.anonymous !== undefined && (obj.anonymous = message.anonymous);
        message.ignore !== undefined && (obj.ignore = message.ignore);
        message.noArguments !== undefined &&
            (obj.noArguments = message.noArguments);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSdkTemplateOption();
        message.anonymous = (_a = object.anonymous) !== null && _a !== void 0 ? _a : false;
        message.ignore = (_b = object.ignore) !== null && _b !== void 0 ? _b : false;
        message.noArguments = (_c = object.noArguments) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=field-options.js.map