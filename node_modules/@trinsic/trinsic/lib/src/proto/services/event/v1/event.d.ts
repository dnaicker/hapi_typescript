import _m0 from "protobufjs/minimal";
/** All event types */
export declare enum EventType {
    PING = 0,
    LOG = 1,
    EGF_CREATED = 5,
    EGF_MEMBER_REGISTERED = 6,
    EGF_MEMBER_UNREGISTERED = 7,
    TEMPLATE_CREATED = 10,
    TEMPLATE_DELETED = 11,
    WALLET_CREATED = 15,
    ITEM_RECEIVED = 16,
    UNRECOGNIZED = -1
}
export declare function eventTypeFromJSON(object: any): EventType;
export declare function eventTypeToJSON(object: EventType): string;
/** Event */
export interface Event {
    /** UUID of event */
    id: string;
    /** Type of event */
    type: EventType;
    /** Timestamp event occurred, in ISO 8601 format (ex. `2022-07-07T08:09:10.11Z`) */
    timestamp: string;
    /** Event-specific payload, as an encoded protobuf message */
    data: Uint8Array;
}
export interface APICall {
    source: string;
    request: Uint8Array;
    response: Uint8Array;
}
/** Webhook test event */
export interface Ping {
    /** UUID of this ping */
    id: string;
    /** UUID of the webhook receiving the ping */
    webhookId: string;
    /** Timestamp ping was requested, in ISO 8601 format (ex. `2022-07-07T08:09:10.11Z`) */
    timestamp: string;
    /** Arbitrary message specified when ping was requested */
    message: string;
}
/** Entity Governance Framework created and attached to ecosystem */
export interface EGFCreated {
    /** UUID of the governance framework */
    id: string;
    /** UUID of the ecosystem that owns this EGF */
    ecosystemId: string;
    /** Trust registry associated with this EGF */
    trustRegistry: string;
    /** Wallet ID of the authority for this EGF */
    governingAuthority: string;
    /** Type of EGF */
    type: string;
    /** User-friendly name for the EGF */
    name: string;
    /** Description of the EGF */
    description: string;
    /** URI for the EGF */
    governanceFramework: string;
}
/** Template created in ecosystem */
export interface TemplateCreated {
    /** UUID of the template */
    id: string;
    /** UUID of the ecosystem that owns this template */
    ecosystemId: string;
    /** Template name */
    name: string;
    /** Template type */
    type: string;
    /** WalletID that created the template */
    createdBy: string;
}
/** Item inserted into wallet */
export interface ItemReceived {
    /** UUID of the new item */
    id: string;
    /** Timestamp when the item was received, in ISO 8601 format (ex. `2022-07-07T08:09:10.11Z`) */
    received: string;
}
export declare const Event: {
    encode(message: Event, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Event;
    fromJSON(object: any): Event;
    toJSON(message: Event): unknown;
    fromPartial(object: DeepPartial<Event>): Event;
};
export declare const APICall: {
    encode(message: APICall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): APICall;
    fromJSON(object: any): APICall;
    toJSON(message: APICall): unknown;
    fromPartial(object: DeepPartial<APICall>): APICall;
};
export declare const Ping: {
    encode(message: Ping, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ping;
    fromJSON(object: any): Ping;
    toJSON(message: Ping): unknown;
    fromPartial(object: DeepPartial<Ping>): Ping;
};
export declare const EGFCreated: {
    encode(message: EGFCreated, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EGFCreated;
    fromJSON(object: any): EGFCreated;
    toJSON(message: EGFCreated): unknown;
    fromPartial(object: DeepPartial<EGFCreated>): EGFCreated;
};
export declare const TemplateCreated: {
    encode(message: TemplateCreated, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TemplateCreated;
    fromJSON(object: any): TemplateCreated;
    toJSON(message: TemplateCreated): unknown;
    fromPartial(object: DeepPartial<TemplateCreated>): TemplateCreated;
};
export declare const ItemReceived: {
    encode(message: ItemReceived, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ItemReceived;
    fromJSON(object: any): ItemReceived;
    toJSON(message: ItemReceived): unknown;
    fromPartial(object: DeepPartial<ItemReceived>): ItemReceived;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
