"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemReceived = exports.TemplateCreated = exports.EGFCreated = exports.Ping = exports.APICall = exports.Event = exports.eventTypeToJSON = exports.eventTypeFromJSON = exports.EventType = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
/** All event types */
var EventType;
(function (EventType) {
    EventType[EventType["PING"] = 0] = "PING";
    EventType[EventType["LOG"] = 1] = "LOG";
    EventType[EventType["EGF_CREATED"] = 5] = "EGF_CREATED";
    EventType[EventType["EGF_MEMBER_REGISTERED"] = 6] = "EGF_MEMBER_REGISTERED";
    EventType[EventType["EGF_MEMBER_UNREGISTERED"] = 7] = "EGF_MEMBER_UNREGISTERED";
    EventType[EventType["TEMPLATE_CREATED"] = 10] = "TEMPLATE_CREATED";
    EventType[EventType["TEMPLATE_DELETED"] = 11] = "TEMPLATE_DELETED";
    EventType[EventType["WALLET_CREATED"] = 15] = "WALLET_CREATED";
    EventType[EventType["ITEM_RECEIVED"] = 16] = "ITEM_RECEIVED";
    EventType[EventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EventType = exports.EventType || (exports.EventType = {}));
function eventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PING":
            return EventType.PING;
        case 1:
        case "LOG":
            return EventType.LOG;
        case 5:
        case "EGF_CREATED":
            return EventType.EGF_CREATED;
        case 6:
        case "EGF_MEMBER_REGISTERED":
            return EventType.EGF_MEMBER_REGISTERED;
        case 7:
        case "EGF_MEMBER_UNREGISTERED":
            return EventType.EGF_MEMBER_UNREGISTERED;
        case 10:
        case "TEMPLATE_CREATED":
            return EventType.TEMPLATE_CREATED;
        case 11:
        case "TEMPLATE_DELETED":
            return EventType.TEMPLATE_DELETED;
        case 15:
        case "WALLET_CREATED":
            return EventType.WALLET_CREATED;
        case 16:
        case "ITEM_RECEIVED":
            return EventType.ITEM_RECEIVED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EventType.UNRECOGNIZED;
    }
}
exports.eventTypeFromJSON = eventTypeFromJSON;
function eventTypeToJSON(object) {
    switch (object) {
        case EventType.PING:
            return "PING";
        case EventType.LOG:
            return "LOG";
        case EventType.EGF_CREATED:
            return "EGF_CREATED";
        case EventType.EGF_MEMBER_REGISTERED:
            return "EGF_MEMBER_REGISTERED";
        case EventType.EGF_MEMBER_UNREGISTERED:
            return "EGF_MEMBER_UNREGISTERED";
        case EventType.TEMPLATE_CREATED:
            return "TEMPLATE_CREATED";
        case EventType.TEMPLATE_DELETED:
            return "TEMPLATE_DELETED";
        case EventType.WALLET_CREATED:
            return "WALLET_CREATED";
        case EventType.ITEM_RECEIVED:
            return "ITEM_RECEIVED";
        case EventType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.eventTypeToJSON = eventTypeToJSON;
function createBaseEvent() {
    return { id: "", type: 0, timestamp: "", data: new Uint8Array() };
}
exports.Event = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.timestamp !== "") {
            writer.uint32(26).string(message.timestamp);
        }
        if (message.data.length !== 0) {
            writer.uint32(34).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                case 3:
                    message.timestamp = reader.string();
                    break;
                case 4:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            type: isSet(object.type) ? eventTypeFromJSON(object.type) : 0,
            timestamp: isSet(object.timestamp) ? String(object.timestamp) : "",
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.type !== undefined && (obj.type = eventTypeToJSON(message.type));
        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        message.data = (_d = object.data) !== null && _d !== void 0 ? _d : new Uint8Array();
        return message;
    },
};
function createBaseAPICall() {
    return { source: "", request: new Uint8Array(), response: new Uint8Array() };
}
exports.APICall = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.source !== "") {
            writer.uint32(10).string(message.source);
        }
        if (message.request.length !== 0) {
            writer.uint32(18).bytes(message.request);
        }
        if (message.response.length !== 0) {
            writer.uint32(26).bytes(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAPICall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.source = reader.string();
                    break;
                case 2:
                    message.request = reader.bytes();
                    break;
                case 3:
                    message.response = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            source: isSet(object.source) ? String(object.source) : "",
            request: isSet(object.request)
                ? bytesFromBase64(object.request)
                : new Uint8Array(),
            response: isSet(object.response)
                ? bytesFromBase64(object.response)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.source !== undefined && (obj.source = message.source);
        message.request !== undefined &&
            (obj.request = base64FromBytes(message.request !== undefined ? message.request : new Uint8Array()));
        message.response !== undefined &&
            (obj.response = base64FromBytes(message.response !== undefined ? message.response : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAPICall();
        message.source = (_a = object.source) !== null && _a !== void 0 ? _a : "";
        message.request = (_b = object.request) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.response = (_c = object.response) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBasePing() {
    return { id: "", webhookId: "", timestamp: "", message: "" };
}
exports.Ping = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.webhookId !== "") {
            writer.uint32(18).string(message.webhookId);
        }
        if (message.timestamp !== "") {
            writer.uint32(26).string(message.timestamp);
        }
        if (message.message !== "") {
            writer.uint32(34).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePing();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.webhookId = reader.string();
                    break;
                case 3:
                    message.timestamp = reader.string();
                    break;
                case 4:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            webhookId: isSet(object.webhookId) ? String(object.webhookId) : "",
            timestamp: isSet(object.timestamp) ? String(object.timestamp) : "",
            message: isSet(object.message) ? String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.webhookId !== undefined && (obj.webhookId = message.webhookId);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBasePing();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.webhookId = (_b = object.webhookId) !== null && _b !== void 0 ? _b : "";
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        message.message = (_d = object.message) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEGFCreated() {
    return {
        id: "",
        ecosystemId: "",
        trustRegistry: "",
        governingAuthority: "",
        type: "",
        name: "",
        description: "",
        governanceFramework: "",
    };
}
exports.EGFCreated = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.ecosystemId !== "") {
            writer.uint32(18).string(message.ecosystemId);
        }
        if (message.trustRegistry !== "") {
            writer.uint32(26).string(message.trustRegistry);
        }
        if (message.governingAuthority !== "") {
            writer.uint32(34).string(message.governingAuthority);
        }
        if (message.type !== "") {
            writer.uint32(42).string(message.type);
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(58).string(message.description);
        }
        if (message.governanceFramework !== "") {
            writer.uint32(66).string(message.governanceFramework);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEGFCreated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.ecosystemId = reader.string();
                    break;
                case 3:
                    message.trustRegistry = reader.string();
                    break;
                case 4:
                    message.governingAuthority = reader.string();
                    break;
                case 5:
                    message.type = reader.string();
                    break;
                case 6:
                    message.name = reader.string();
                    break;
                case 7:
                    message.description = reader.string();
                    break;
                case 8:
                    message.governanceFramework = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            ecosystemId: isSet(object.ecosystemId) ? String(object.ecosystemId) : "",
            trustRegistry: isSet(object.trustRegistry)
                ? String(object.trustRegistry)
                : "",
            governingAuthority: isSet(object.governingAuthority)
                ? String(object.governingAuthority)
                : "",
            type: isSet(object.type) ? String(object.type) : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
            governanceFramework: isSet(object.governanceFramework)
                ? String(object.governanceFramework)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.ecosystemId !== undefined &&
            (obj.ecosystemId = message.ecosystemId);
        message.trustRegistry !== undefined &&
            (obj.trustRegistry = message.trustRegistry);
        message.governingAuthority !== undefined &&
            (obj.governingAuthority = message.governingAuthority);
        message.type !== undefined && (obj.type = message.type);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined &&
            (obj.description = message.description);
        message.governanceFramework !== undefined &&
            (obj.governanceFramework = message.governanceFramework);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseEGFCreated();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.ecosystemId = (_b = object.ecosystemId) !== null && _b !== void 0 ? _b : "";
        message.trustRegistry = (_c = object.trustRegistry) !== null && _c !== void 0 ? _c : "";
        message.governingAuthority = (_d = object.governingAuthority) !== null && _d !== void 0 ? _d : "";
        message.type = (_e = object.type) !== null && _e !== void 0 ? _e : "";
        message.name = (_f = object.name) !== null && _f !== void 0 ? _f : "";
        message.description = (_g = object.description) !== null && _g !== void 0 ? _g : "";
        message.governanceFramework = (_h = object.governanceFramework) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseTemplateCreated() {
    return { id: "", ecosystemId: "", name: "", type: "", createdBy: "" };
}
exports.TemplateCreated = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.ecosystemId !== "") {
            writer.uint32(18).string(message.ecosystemId);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(34).string(message.type);
        }
        if (message.createdBy !== "") {
            writer.uint32(42).string(message.createdBy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTemplateCreated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.ecosystemId = reader.string();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.type = reader.string();
                    break;
                case 5:
                    message.createdBy = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            ecosystemId: isSet(object.ecosystemId) ? String(object.ecosystemId) : "",
            name: isSet(object.name) ? String(object.name) : "",
            type: isSet(object.type) ? String(object.type) : "",
            createdBy: isSet(object.createdBy) ? String(object.createdBy) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.ecosystemId !== undefined &&
            (obj.ecosystemId = message.ecosystemId);
        message.name !== undefined && (obj.name = message.name);
        message.type !== undefined && (obj.type = message.type);
        message.createdBy !== undefined && (obj.createdBy = message.createdBy);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseTemplateCreated();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.ecosystemId = (_b = object.ecosystemId) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : "";
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : "";
        message.createdBy = (_e = object.createdBy) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseItemReceived() {
    return { id: "", received: "" };
}
exports.ItemReceived = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.received !== "") {
            writer.uint32(18).string(message.received);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseItemReceived();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.received = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            received: isSet(object.received) ? String(object.received) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.received !== undefined && (obj.received = message.received);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseItemReceived();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.received = (_b = object.received) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map