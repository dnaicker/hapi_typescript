"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialTemplatesDefinition = exports.TemplateData_FieldsEntry = exports.TemplateData = exports.ListTemplatesResponse = exports.ListTemplatesRequest = exports.GetTemplateResponse = exports.GetTemplateRequest = exports.TemplateField = exports.CreateCredentialTemplateResponse = exports.CreateCredentialTemplateRequest_FieldsEntry = exports.CreateCredentialTemplateRequest = exports.DeleteCredentialTemplateResponse = exports.DeleteCredentialTemplateRequest = exports.ListCredentialTemplatesResponse = exports.ListCredentialTemplatesRequest = exports.SearchCredentialTemplatesResponse = exports.SearchCredentialTemplatesRequest = exports.GetCredentialTemplateResponse = exports.GetCredentialTemplateRequest = exports.fieldTypeToJSON = exports.fieldTypeFromJSON = exports.FieldType = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
/** Valid types for credential fields */
var FieldType;
(function (FieldType) {
    FieldType[FieldType["STRING"] = 0] = "STRING";
    FieldType[FieldType["NUMBER"] = 1] = "NUMBER";
    FieldType[FieldType["BOOL"] = 2] = "BOOL";
    FieldType[FieldType["DATETIME"] = 4] = "DATETIME";
    FieldType[FieldType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldType = exports.FieldType || (exports.FieldType = {}));
function fieldTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "STRING":
            return FieldType.STRING;
        case 1:
        case "NUMBER":
            return FieldType.NUMBER;
        case 2:
        case "BOOL":
            return FieldType.BOOL;
        case 4:
        case "DATETIME":
            return FieldType.DATETIME;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FieldType.UNRECOGNIZED;
    }
}
exports.fieldTypeFromJSON = fieldTypeFromJSON;
function fieldTypeToJSON(object) {
    switch (object) {
        case FieldType.STRING:
            return "STRING";
        case FieldType.NUMBER:
            return "NUMBER";
        case FieldType.BOOL:
            return "BOOL";
        case FieldType.DATETIME:
            return "DATETIME";
        case FieldType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.fieldTypeToJSON = fieldTypeToJSON;
function createBaseGetCredentialTemplateRequest() {
    return { id: "" };
}
exports.GetCredentialTemplateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCredentialTemplateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCredentialTemplateRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCredentialTemplateResponse() {
    return { template: undefined };
}
exports.GetCredentialTemplateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.template !== undefined) {
            exports.TemplateData.encode(message.template, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCredentialTemplateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.template = exports.TemplateData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            template: isSet(object.template)
                ? exports.TemplateData.fromJSON(object.template)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.template !== undefined &&
            (obj.template = message.template
                ? exports.TemplateData.toJSON(message.template)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetCredentialTemplateResponse();
        message.template =
            object.template !== undefined && object.template !== null
                ? exports.TemplateData.fromPartial(object.template)
                : undefined;
        return message;
    },
};
function createBaseSearchCredentialTemplatesRequest() {
    return { query: "", continuationToken: "" };
}
exports.SearchCredentialTemplatesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.continuationToken !== "") {
            writer.uint32(18).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchCredentialTemplatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.query = reader.string();
                    break;
                case 2:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? String(object.query) : "",
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.query !== undefined && (obj.query = message.query);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSearchCredentialTemplatesRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.continuationToken = (_b = object.continuationToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSearchCredentialTemplatesResponse() {
    return { itemsJson: "", hasMore: false, continuationToken: "" };
}
exports.SearchCredentialTemplatesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.itemsJson !== "") {
            writer.uint32(10).string(message.itemsJson);
        }
        if (message.hasMore === true) {
            writer.uint32(16).bool(message.hasMore);
        }
        if (message.continuationToken !== "") {
            writer.uint32(34).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchCredentialTemplatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemsJson = reader.string();
                    break;
                case 2:
                    message.hasMore = reader.bool();
                    break;
                case 4:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemsJson: isSet(object.itemsJson) ? String(object.itemsJson) : "",
            hasMore: isSet(object.hasMore) ? Boolean(object.hasMore) : false,
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.itemsJson !== undefined && (obj.itemsJson = message.itemsJson);
        message.hasMore !== undefined && (obj.hasMore = message.hasMore);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSearchCredentialTemplatesResponse();
        message.itemsJson = (_a = object.itemsJson) !== null && _a !== void 0 ? _a : "";
        message.hasMore = (_b = object.hasMore) !== null && _b !== void 0 ? _b : false;
        message.continuationToken = (_c = object.continuationToken) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseListCredentialTemplatesRequest() {
    return { query: "", continuationToken: "" };
}
exports.ListCredentialTemplatesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.continuationToken !== "") {
            writer.uint32(18).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListCredentialTemplatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.query = reader.string();
                    break;
                case 2:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? String(object.query) : "",
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.query !== undefined && (obj.query = message.query);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListCredentialTemplatesRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.continuationToken = (_b = object.continuationToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseListCredentialTemplatesResponse() {
    return { templates: [], hasMoreResults: false, continuationToken: "" };
}
exports.ListCredentialTemplatesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.templates) {
            exports.TemplateData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.hasMoreResults === true) {
            writer.uint32(16).bool(message.hasMoreResults);
        }
        if (message.continuationToken !== "") {
            writer.uint32(26).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListCredentialTemplatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.templates.push(exports.TemplateData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.hasMoreResults = reader.bool();
                    break;
                case 3:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            templates: Array.isArray(object === null || object === void 0 ? void 0 : object.templates)
                ? object.templates.map((e) => exports.TemplateData.fromJSON(e))
                : [],
            hasMoreResults: isSet(object.hasMoreResults)
                ? Boolean(object.hasMoreResults)
                : false,
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.templates) {
            obj.templates = message.templates.map((e) => e ? exports.TemplateData.toJSON(e) : undefined);
        }
        else {
            obj.templates = [];
        }
        message.hasMoreResults !== undefined &&
            (obj.hasMoreResults = message.hasMoreResults);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListCredentialTemplatesResponse();
        message.templates =
            ((_a = object.templates) === null || _a === void 0 ? void 0 : _a.map((e) => exports.TemplateData.fromPartial(e))) || [];
        message.hasMoreResults = (_b = object.hasMoreResults) !== null && _b !== void 0 ? _b : false;
        message.continuationToken = (_c = object.continuationToken) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseDeleteCredentialTemplateRequest() {
    return { id: "" };
}
exports.DeleteCredentialTemplateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCredentialTemplateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteCredentialTemplateRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteCredentialTemplateResponse() {
    return {};
}
exports.DeleteCredentialTemplateResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCredentialTemplateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseDeleteCredentialTemplateResponse();
        return message;
    },
};
function createBaseCreateCredentialTemplateRequest() {
    return { name: "", fields: {}, allowAdditionalFields: false };
}
exports.CreateCredentialTemplateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        Object.entries(message.fields).forEach(([key, value]) => {
            exports.CreateCredentialTemplateRequest_FieldsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.allowAdditionalFields === true) {
            writer.uint32(24).bool(message.allowAdditionalFields);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCredentialTemplateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    const entry2 = exports.CreateCredentialTemplateRequest_FieldsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.fields[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.allowAdditionalFields = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            fields: isObject(object.fields)
                ? Object.entries(object.fields).reduce((acc, [key, value]) => {
                    acc[key] = exports.TemplateField.fromJSON(value);
                    return acc;
                }, {})
                : {},
            allowAdditionalFields: isSet(object.allowAdditionalFields)
                ? Boolean(object.allowAdditionalFields)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        obj.fields = {};
        if (message.fields) {
            Object.entries(message.fields).forEach(([k, v]) => {
                obj.fields[k] = exports.TemplateField.toJSON(v);
            });
        }
        message.allowAdditionalFields !== undefined &&
            (obj.allowAdditionalFields = message.allowAdditionalFields);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCreateCredentialTemplateRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.fields = Object.entries((_b = object.fields) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.TemplateField.fromPartial(value);
            }
            return acc;
        }, {});
        message.allowAdditionalFields = (_c = object.allowAdditionalFields) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseCreateCredentialTemplateRequest_FieldsEntry() {
    return { key: "", value: undefined };
}
exports.CreateCredentialTemplateRequest_FieldsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.TemplateField.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCredentialTemplateRequest_FieldsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.TemplateField.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value)
                ? exports.TemplateField.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined &&
            (obj.value = message.value
                ? exports.TemplateField.toJSON(message.value)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCreateCredentialTemplateRequest_FieldsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value =
            object.value !== undefined && object.value !== null
                ? exports.TemplateField.fromPartial(object.value)
                : undefined;
        return message;
    },
};
function createBaseCreateCredentialTemplateResponse() {
    return { data: undefined };
}
exports.CreateCredentialTemplateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            exports.TemplateData.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCredentialTemplateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = exports.TemplateData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? exports.TemplateData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = message.data ? exports.TemplateData.toJSON(message.data) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCreateCredentialTemplateResponse();
        message.data =
            object.data !== undefined && object.data !== null
                ? exports.TemplateData.fromPartial(object.data)
                : undefined;
        return message;
    },
};
function createBaseTemplateField() {
    return { description: "", optional: false, type: 0 };
}
exports.TemplateField = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.optional === true) {
            writer.uint32(24).bool(message.optional);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTemplateField();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.optional = reader.bool();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            description: isSet(object.description) ? String(object.description) : "",
            optional: isSet(object.optional) ? Boolean(object.optional) : false,
            type: isSet(object.type) ? fieldTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.description !== undefined &&
            (obj.description = message.description);
        message.optional !== undefined && (obj.optional = message.optional);
        message.type !== undefined && (obj.type = fieldTypeToJSON(message.type));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTemplateField();
        message.description = (_a = object.description) !== null && _a !== void 0 ? _a : "";
        message.optional = (_b = object.optional) !== null && _b !== void 0 ? _b : false;
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseGetTemplateRequest() {
    return { id: "" };
}
exports.GetTemplateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTemplateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetTemplateRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetTemplateResponse() {
    return { data: undefined };
}
exports.GetTemplateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== undefined) {
            exports.TemplateData.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTemplateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = exports.TemplateData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? exports.TemplateData.fromJSON(object.data) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = message.data ? exports.TemplateData.toJSON(message.data) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetTemplateResponse();
        message.data =
            object.data !== undefined && object.data !== null
                ? exports.TemplateData.fromPartial(object.data)
                : undefined;
        return message;
    },
};
function createBaseListTemplatesRequest() {
    return {};
}
exports.ListTemplatesRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTemplatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseListTemplatesRequest();
        return message;
    },
};
function createBaseListTemplatesResponse() {
    return { templates: [] };
}
exports.ListTemplatesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.templates) {
            exports.TemplateData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListTemplatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.templates.push(exports.TemplateData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            templates: Array.isArray(object === null || object === void 0 ? void 0 : object.templates)
                ? object.templates.map((e) => exports.TemplateData.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.templates) {
            obj.templates = message.templates.map((e) => e ? exports.TemplateData.toJSON(e) : undefined);
        }
        else {
            obj.templates = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListTemplatesResponse();
        message.templates =
            ((_a = object.templates) === null || _a === void 0 ? void 0 : _a.map((e) => exports.TemplateData.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTemplateData() {
    return {
        id: "",
        name: "",
        version: 0,
        fields: {},
        allowAdditionalFields: false,
        schemaUri: "",
        contextUri: "",
        ecosystemId: "",
        type: "",
        createdBy: "",
        dateCreated: "",
    };
}
exports.TemplateData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.version !== 0) {
            writer.uint32(24).int32(message.version);
        }
        Object.entries(message.fields).forEach(([key, value]) => {
            exports.TemplateData_FieldsEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.allowAdditionalFields === true) {
            writer.uint32(40).bool(message.allowAdditionalFields);
        }
        if (message.schemaUri !== "") {
            writer.uint32(50).string(message.schemaUri);
        }
        if (message.contextUri !== "") {
            writer.uint32(58).string(message.contextUri);
        }
        if (message.ecosystemId !== "") {
            writer.uint32(66).string(message.ecosystemId);
        }
        if (message.type !== "") {
            writer.uint32(74).string(message.type);
        }
        if (message.createdBy !== "") {
            writer.uint32(82).string(message.createdBy);
        }
        if (message.dateCreated !== "") {
            writer.uint32(90).string(message.dateCreated);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTemplateData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.version = reader.int32();
                    break;
                case 4:
                    const entry4 = exports.TemplateData_FieldsEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.fields[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.allowAdditionalFields = reader.bool();
                    break;
                case 6:
                    message.schemaUri = reader.string();
                    break;
                case 7:
                    message.contextUri = reader.string();
                    break;
                case 8:
                    message.ecosystemId = reader.string();
                    break;
                case 9:
                    message.type = reader.string();
                    break;
                case 10:
                    message.createdBy = reader.string();
                    break;
                case 11:
                    message.dateCreated = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            version: isSet(object.version) ? Number(object.version) : 0,
            fields: isObject(object.fields)
                ? Object.entries(object.fields).reduce((acc, [key, value]) => {
                    acc[key] = exports.TemplateField.fromJSON(value);
                    return acc;
                }, {})
                : {},
            allowAdditionalFields: isSet(object.allowAdditionalFields)
                ? Boolean(object.allowAdditionalFields)
                : false,
            schemaUri: isSet(object.schemaUri) ? String(object.schemaUri) : "",
            contextUri: isSet(object.contextUri) ? String(object.contextUri) : "",
            ecosystemId: isSet(object.ecosystemId) ? String(object.ecosystemId) : "",
            type: isSet(object.type) ? String(object.type) : "",
            createdBy: isSet(object.createdBy) ? String(object.createdBy) : "",
            dateCreated: isSet(object.dateCreated) ? String(object.dateCreated) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.version !== undefined &&
            (obj.version = Math.round(message.version));
        obj.fields = {};
        if (message.fields) {
            Object.entries(message.fields).forEach(([k, v]) => {
                obj.fields[k] = exports.TemplateField.toJSON(v);
            });
        }
        message.allowAdditionalFields !== undefined &&
            (obj.allowAdditionalFields = message.allowAdditionalFields);
        message.schemaUri !== undefined && (obj.schemaUri = message.schemaUri);
        message.contextUri !== undefined && (obj.contextUri = message.contextUri);
        message.ecosystemId !== undefined &&
            (obj.ecosystemId = message.ecosystemId);
        message.type !== undefined && (obj.type = message.type);
        message.createdBy !== undefined && (obj.createdBy = message.createdBy);
        message.dateCreated !== undefined &&
            (obj.dateCreated = message.dateCreated);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseTemplateData();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : 0;
        message.fields = Object.entries((_d = object.fields) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.TemplateField.fromPartial(value);
            }
            return acc;
        }, {});
        message.allowAdditionalFields = (_e = object.allowAdditionalFields) !== null && _e !== void 0 ? _e : false;
        message.schemaUri = (_f = object.schemaUri) !== null && _f !== void 0 ? _f : "";
        message.contextUri = (_g = object.contextUri) !== null && _g !== void 0 ? _g : "";
        message.ecosystemId = (_h = object.ecosystemId) !== null && _h !== void 0 ? _h : "";
        message.type = (_j = object.type) !== null && _j !== void 0 ? _j : "";
        message.createdBy = (_k = object.createdBy) !== null && _k !== void 0 ? _k : "";
        message.dateCreated = (_l = object.dateCreated) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseTemplateData_FieldsEntry() {
    return { key: "", value: undefined };
}
exports.TemplateData_FieldsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.TemplateField.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTemplateData_FieldsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.TemplateField.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value)
                ? exports.TemplateField.fromJSON(object.value)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined &&
            (obj.value = message.value
                ? exports.TemplateField.toJSON(message.value)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTemplateData_FieldsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value =
            object.value !== undefined && object.value !== null
                ? exports.TemplateField.fromPartial(object.value)
                : undefined;
        return message;
    },
};
exports.CredentialTemplatesDefinition = {
    name: "CredentialTemplates",
    fullName: "services.verifiablecredentials.templates.v1.CredentialTemplates",
    methods: {
        /** Create a credential template in the current ecosystem */
        create: {
            name: "Create",
            requestType: exports.CreateCredentialTemplateRequest,
            requestStream: false,
            responseType: exports.CreateCredentialTemplateResponse,
            responseStream: false,
            options: {},
        },
        /** Fetch a credential template by ID */
        get: {
            name: "Get",
            requestType: exports.GetCredentialTemplateRequest,
            requestStream: false,
            responseType: exports.GetCredentialTemplateResponse,
            responseStream: false,
            options: {},
        },
        /** Search credential templates using SQL, returning strongly-typed template data */
        list: {
            name: "List",
            requestType: exports.ListCredentialTemplatesRequest,
            requestStream: false,
            responseType: exports.ListCredentialTemplatesResponse,
            responseStream: false,
            options: {},
        },
        /** Search credential templates using SQL, returning raw JSON data */
        search: {
            name: "Search",
            requestType: exports.SearchCredentialTemplatesRequest,
            requestStream: false,
            responseType: exports.SearchCredentialTemplatesResponse,
            responseStream: false,
            options: {},
        },
        /** Delete a credential template from the current ecosystem by ID */
        delete: {
            name: "Delete",
            requestType: exports.DeleteCredentialTemplateRequest,
            requestStream: false,
            responseType: exports.DeleteCredentialTemplateResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=templates.js.map