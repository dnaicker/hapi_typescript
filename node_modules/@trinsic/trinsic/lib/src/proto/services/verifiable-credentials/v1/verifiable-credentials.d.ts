import _m0 from "protobufjs/minimal";
/** Request to sign a JSON-LD Credential using public key tied to caller */
export interface IssueRequest {
    /** Valid JSON-LD Credential document to be signed, in string form */
    documentJson: string;
}
/** Response to `IssueRequest` */
export interface IssueResponse {
    /**
     * Verifiable Credential document, signed with public key
     * tied to caller of `IssueRequest`
     */
    signedDocumentJson: string;
}
/** Request to create and sign a JSON-LD Verifiable Credential from a template using public key tied to caller */
export interface IssueFromTemplateRequest {
    /** ID of template to use */
    templateId: string;
    /**
     * JSON document string with keys corresponding to the fields of
     * the template referenced by `template_id`
     */
    valuesJson: string;
    /**
     * Governance framework ID to use with issuance of this credential.
     * If specified, the issued credential will contain extended issuer
     * metadata with membership info for the given ecosystem governance framework (EGF)
     */
    frameworkId: string;
}
/** Response to `IssueFromTemplateRequest` */
export interface IssueFromTemplateResponse {
    /**
     * Verifiable Credential document, in JSON-LD form,
     * constructed from the specified template and values; signed
     * with public key tied to caller of `IssueFromTemplateRequest`
     */
    documentJson: string;
}
/**
 * Request to create a proof for a Verifiable Credential using public key tied to caller.
 * Either `item_id` or `document_json` may be provided, not both.
 */
export interface CreateProofRequest {
    /**
     * A valid JSON-LD frame describing which fields should be
     * revealed in the generated proof.
     * If unspecified, all fields in the document will be revealed
     */
    revealDocumentJson: string;
    /** ID of wallet item stored in a Trinsic cloud wallet */
    itemId: string | undefined;
    /**
     * A valid JSON-LD Verifiable Credential document string
     * with an unbound signature. The proof will be derived from this
     * document directly. The document will not be stored in the wallet.
     */
    documentJson: string | undefined;
}
/** Response to `CreateProofRequest` */
export interface CreateProofResponse {
    /** Valid JSON-LD proof for the specified credential */
    proofDocumentJson: string;
}
/** Request to verify a proof */
export interface VerifyProofRequest {
    /** JSON-LD proof document string to verify */
    proofDocumentJson: string;
}
/** Response to `VerifyProofRequest` */
export interface VerifyProofResponse {
    /** Whether all validations in `validation_results` passed */
    isValid: boolean;
    /**
     * Use `validation_results` instead
     *
     * @deprecated
     */
    validationMessages: string[];
    /**
     * Results of each validation check performed,
     * such as schema conformance, revocation status, signature, etc.
     * Detailed results are provided for failed validations.
     */
    validationResults: {
        [key: string]: ValidationMessage;
    };
}
export interface VerifyProofResponse_ValidationResultsEntry {
    key: string;
    value: ValidationMessage | undefined;
}
/** Result of a validation check on a proof */
export interface ValidationMessage {
    /** Whether or not this validation check passed */
    isValid: boolean;
    /** If validation failed, contains messages explaining why */
    messages: string[];
}
/** Request to send a document to another user's wallet */
export interface SendRequest {
    /** Email address of user to send item to */
    email: string | undefined;
    /** DID of recipient (presently unsupported) */
    didUri: string | undefined;
    /** DIDComm out-of-band invitation JSON (presently unsupported) */
    didcommInvitationJson: string | undefined;
    /** JSON document to send to recipient */
    documentJson: string;
}
/** Response to `SendRequest` */
export interface SendResponse {
}
/** Request to update a credential's revocation status */
export interface UpdateStatusRequest {
    /** Credential Status ID to update. This is not the same as the credential's ID. */
    credentialStatusId: string;
    /** New revocation status of credential */
    revoked: boolean;
}
/** Response to `UpdateStatusRequest` */
export interface UpdateStatusResponse {
}
/** Request to check a credential's revocation status */
export interface CheckStatusRequest {
    /** Credential Status ID to check. This is not the same as the credential's ID. */
    credentialStatusId: string;
}
/** Response to `CheckStatusRequest` */
export interface CheckStatusResponse {
    /** The credential's revocation status */
    revoked: boolean;
}
export declare const IssueRequest: {
    encode(message: IssueRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IssueRequest;
    fromJSON(object: any): IssueRequest;
    toJSON(message: IssueRequest): unknown;
    fromPartial(object: DeepPartial<IssueRequest>): IssueRequest;
};
export declare const IssueResponse: {
    encode(message: IssueResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IssueResponse;
    fromJSON(object: any): IssueResponse;
    toJSON(message: IssueResponse): unknown;
    fromPartial(object: DeepPartial<IssueResponse>): IssueResponse;
};
export declare const IssueFromTemplateRequest: {
    encode(message: IssueFromTemplateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IssueFromTemplateRequest;
    fromJSON(object: any): IssueFromTemplateRequest;
    toJSON(message: IssueFromTemplateRequest): unknown;
    fromPartial(object: DeepPartial<IssueFromTemplateRequest>): IssueFromTemplateRequest;
};
export declare const IssueFromTemplateResponse: {
    encode(message: IssueFromTemplateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IssueFromTemplateResponse;
    fromJSON(object: any): IssueFromTemplateResponse;
    toJSON(message: IssueFromTemplateResponse): unknown;
    fromPartial(object: DeepPartial<IssueFromTemplateResponse>): IssueFromTemplateResponse;
};
export declare const CreateProofRequest: {
    encode(message: CreateProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofRequest;
    fromJSON(object: any): CreateProofRequest;
    toJSON(message: CreateProofRequest): unknown;
    fromPartial(object: DeepPartial<CreateProofRequest>): CreateProofRequest;
};
export declare const CreateProofResponse: {
    encode(message: CreateProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofResponse;
    fromJSON(object: any): CreateProofResponse;
    toJSON(message: CreateProofResponse): unknown;
    fromPartial(object: DeepPartial<CreateProofResponse>): CreateProofResponse;
};
export declare const VerifyProofRequest: {
    encode(message: VerifyProofRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofRequest;
    fromJSON(object: any): VerifyProofRequest;
    toJSON(message: VerifyProofRequest): unknown;
    fromPartial(object: DeepPartial<VerifyProofRequest>): VerifyProofRequest;
};
export declare const VerifyProofResponse: {
    encode(message: VerifyProofResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofResponse;
    fromJSON(object: any): VerifyProofResponse;
    toJSON(message: VerifyProofResponse): unknown;
    fromPartial(object: DeepPartial<VerifyProofResponse>): VerifyProofResponse;
};
export declare const VerifyProofResponse_ValidationResultsEntry: {
    encode(message: VerifyProofResponse_ValidationResultsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofResponse_ValidationResultsEntry;
    fromJSON(object: any): VerifyProofResponse_ValidationResultsEntry;
    toJSON(message: VerifyProofResponse_ValidationResultsEntry): unknown;
    fromPartial(object: DeepPartial<VerifyProofResponse_ValidationResultsEntry>): VerifyProofResponse_ValidationResultsEntry;
};
export declare const ValidationMessage: {
    encode(message: ValidationMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidationMessage;
    fromJSON(object: any): ValidationMessage;
    toJSON(message: ValidationMessage): unknown;
    fromPartial(object: DeepPartial<ValidationMessage>): ValidationMessage;
};
export declare const SendRequest: {
    encode(message: SendRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendRequest;
    fromJSON(object: any): SendRequest;
    toJSON(message: SendRequest): unknown;
    fromPartial(object: DeepPartial<SendRequest>): SendRequest;
};
export declare const SendResponse: {
    encode(_: SendResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendResponse;
    fromJSON(_: any): SendResponse;
    toJSON(_: SendResponse): unknown;
    fromPartial(_: DeepPartial<SendResponse>): SendResponse;
};
export declare const UpdateStatusRequest: {
    encode(message: UpdateStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStatusRequest;
    fromJSON(object: any): UpdateStatusRequest;
    toJSON(message: UpdateStatusRequest): unknown;
    fromPartial(object: DeepPartial<UpdateStatusRequest>): UpdateStatusRequest;
};
export declare const UpdateStatusResponse: {
    encode(_: UpdateStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStatusResponse;
    fromJSON(_: any): UpdateStatusResponse;
    toJSON(_: UpdateStatusResponse): unknown;
    fromPartial(_: DeepPartial<UpdateStatusResponse>): UpdateStatusResponse;
};
export declare const CheckStatusRequest: {
    encode(message: CheckStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckStatusRequest;
    fromJSON(object: any): CheckStatusRequest;
    toJSON(message: CheckStatusRequest): unknown;
    fromPartial(object: DeepPartial<CheckStatusRequest>): CheckStatusRequest;
};
export declare const CheckStatusResponse: {
    encode(message: CheckStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckStatusResponse;
    fromJSON(object: any): CheckStatusResponse;
    toJSON(message: CheckStatusResponse): unknown;
    fromPartial(object: DeepPartial<CheckStatusResponse>): CheckStatusResponse;
};
export declare type VerifiableCredentialDefinition = typeof VerifiableCredentialDefinition;
export declare const VerifiableCredentialDefinition: {
    readonly name: "VerifiableCredential";
    readonly fullName: "services.verifiablecredentials.v1.VerifiableCredential";
    readonly methods: {
        /**
         * Sign and issue a verifiable credential from a submitted document.
         * The document must be a valid JSON-LD document.
         */
        readonly issue: {
            readonly name: "Issue";
            readonly requestType: {
                encode(message: IssueRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IssueRequest;
                fromJSON(object: any): IssueRequest;
                toJSON(message: IssueRequest): unknown;
                fromPartial(object: DeepPartial<IssueRequest>): IssueRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: IssueResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IssueResponse;
                fromJSON(object: any): IssueResponse;
                toJSON(message: IssueResponse): unknown;
                fromPartial(object: DeepPartial<IssueResponse>): IssueResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Sign and issue a verifiable credential from a pre-defined template.
         * This process will also add schema validation and
         * revocation registry values to the credential.
         */
        readonly issueFromTemplate: {
            readonly name: "IssueFromTemplate";
            readonly requestType: {
                encode(message: IssueFromTemplateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IssueFromTemplateRequest;
                fromJSON(object: any): IssueFromTemplateRequest;
                toJSON(message: IssueFromTemplateRequest): unknown;
                fromPartial(object: DeepPartial<IssueFromTemplateRequest>): IssueFromTemplateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: IssueFromTemplateResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IssueFromTemplateResponse;
                fromJSON(object: any): IssueFromTemplateResponse;
                toJSON(message: IssueFromTemplateResponse): unknown;
                fromPartial(object: DeepPartial<IssueFromTemplateResponse>): IssueFromTemplateResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Check credential status in the revocation registry */
        readonly checkStatus: {
            readonly name: "CheckStatus";
            readonly requestType: {
                encode(message: CheckStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckStatusRequest;
                fromJSON(object: any): CheckStatusRequest;
                toJSON(message: CheckStatusRequest): unknown;
                fromPartial(object: DeepPartial<CheckStatusRequest>): CheckStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CheckStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckStatusResponse;
                fromJSON(object: any): CheckStatusResponse;
                toJSON(message: CheckStatusResponse): unknown;
                fromPartial(object: DeepPartial<CheckStatusResponse>): CheckStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Update credential status by setting the revocation value */
        readonly updateStatus: {
            readonly name: "UpdateStatus";
            readonly requestType: {
                encode(message: UpdateStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStatusRequest;
                fromJSON(object: any): UpdateStatusRequest;
                toJSON(message: UpdateStatusRequest): unknown;
                fromPartial(object: DeepPartial<UpdateStatusRequest>): UpdateStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: UpdateStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateStatusResponse;
                fromJSON(_: any): UpdateStatusResponse;
                toJSON(_: UpdateStatusResponse): unknown;
                fromPartial(_: DeepPartial<UpdateStatusResponse>): UpdateStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Create a proof from a signed document that is a valid
         * verifiable credential and contains a signature from which a proof can be derived.
         */
        readonly createProof: {
            readonly name: "CreateProof";
            readonly requestType: {
                encode(message: CreateProofRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofRequest;
                fromJSON(object: any): CreateProofRequest;
                toJSON(message: CreateProofRequest): unknown;
                fromPartial(object: DeepPartial<CreateProofRequest>): CreateProofRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CreateProofResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateProofResponse;
                fromJSON(object: any): CreateProofResponse;
                toJSON(message: CreateProofResponse): unknown;
                fromPartial(object: DeepPartial<CreateProofResponse>): CreateProofResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Verifies a proof by checking the signature value, and if possible schema validation,
         * revocation status, and issuer status against a trust registry
         */
        readonly verifyProof: {
            readonly name: "VerifyProof";
            readonly requestType: {
                encode(message: VerifyProofRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofRequest;
                fromJSON(object: any): VerifyProofRequest;
                toJSON(message: VerifyProofRequest): unknown;
                fromPartial(object: DeepPartial<VerifyProofRequest>): VerifyProofRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: VerifyProofResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VerifyProofResponse;
                fromJSON(object: any): VerifyProofResponse;
                toJSON(message: VerifyProofResponse): unknown;
                fromPartial(object: DeepPartial<VerifyProofResponse>): VerifyProofResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Sends a document directly to a user's email within the given ecosystem */
        readonly send: {
            readonly name: "Send";
            readonly requestType: {
                encode(message: SendRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SendRequest;
                fromJSON(object: any): SendRequest;
                toJSON(message: SendRequest): unknown;
                fromPartial(object: DeepPartial<SendRequest>): SendRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: SendResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SendResponse;
                fromJSON(_: any): SendResponse;
                toJSON(_: SendResponse): unknown;
                fromPartial(_: DeepPartial<SendResponse>): SendResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
