"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for services.trustregistry.v1
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustRegistryClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
const grpcWeb = __importStar(require("grpc-web"));
const services_trust$registry_v1_trust$registry_pb = __importStar(require("../../../services/trust-registry/v1/trust-registry_pb"));
class TrustRegistryClient {
    constructor(hostname, credentials, options) {
        this.methodInfoAddFramework = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse.deserializeBinary);
        this.methodInfoRemoveFramework = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse.deserializeBinary);
        this.methodInfoSearchRegistry = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse.deserializeBinary);
        this.methodInfoRegisterIssuer = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse.deserializeBinary);
        this.methodInfoRegisterVerifier = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse.deserializeBinary);
        this.methodInfoUnregisterIssuer = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse.deserializeBinary);
        this.methodInfoUnregisterVerifier = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse.deserializeBinary);
        this.methodInfoCheckIssuerStatus = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse.deserializeBinary);
        this.methodInfoCheckVerifierStatus = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse.deserializeBinary);
        this.methodInfoFetchData = new grpcWeb.AbstractClientBase.MethodInfo(services_trust$registry_v1_trust$registry_pb.FetchDataResponse, (request) => {
            return request.serializeBinary();
        }, services_trust$registry_v1_trust$registry_pb.FetchDataResponse.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options["format"] = "text";
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    addFramework(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/AddFramework", request, metadata || {}, this.methodInfoAddFramework, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/AddFramework", request, metadata || {}, this.methodInfoAddFramework);
    }
    removeFramework(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/RemoveFramework", request, metadata || {}, this.methodInfoRemoveFramework, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/RemoveFramework", request, metadata || {}, this.methodInfoRemoveFramework);
    }
    searchRegistry(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/SearchRegistry", request, metadata || {}, this.methodInfoSearchRegistry, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/SearchRegistry", request, metadata || {}, this.methodInfoSearchRegistry);
    }
    registerIssuer(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/RegisterIssuer", request, metadata || {}, this.methodInfoRegisterIssuer, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/RegisterIssuer", request, metadata || {}, this.methodInfoRegisterIssuer);
    }
    registerVerifier(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/RegisterVerifier", request, metadata || {}, this.methodInfoRegisterVerifier, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/RegisterVerifier", request, metadata || {}, this.methodInfoRegisterVerifier);
    }
    unregisterIssuer(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/UnregisterIssuer", request, metadata || {}, this.methodInfoUnregisterIssuer, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/UnregisterIssuer", request, metadata || {}, this.methodInfoUnregisterIssuer);
    }
    unregisterVerifier(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/UnregisterVerifier", request, metadata || {}, this.methodInfoUnregisterVerifier, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/UnregisterVerifier", request, metadata || {}, this.methodInfoUnregisterVerifier);
    }
    checkIssuerStatus(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/CheckIssuerStatus", request, metadata || {}, this.methodInfoCheckIssuerStatus, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/CheckIssuerStatus", request, metadata || {}, this.methodInfoCheckIssuerStatus);
    }
    checkVerifierStatus(request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                "/services.trustregistry.v1.TrustRegistry/CheckVerifierStatus", request, metadata || {}, this.methodInfoCheckVerifierStatus, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/CheckVerifierStatus", request, metadata || {}, this.methodInfoCheckVerifierStatus);
    }
    fetchData(request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            "/services.trustregistry.v1.TrustRegistry/FetchData", request, metadata || {}, this.methodInfoFetchData);
    }
}
exports.TrustRegistryClient = TrustRegistryClient;
//# sourceMappingURL=Trust-registryServiceClientPb.js.map