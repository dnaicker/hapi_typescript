import _m0 from "protobufjs/minimal";
export declare enum RegistrationStatus {
    /** CURRENT - Member is currently authorized, as of the time of the query */
    CURRENT = 0,
    /** EXPIRED - Member's authorization has expired */
    EXPIRED = 1,
    /** TERMINATED - Member has voluntarily ceased Issuer role under the specific EGF */
    TERMINATED = 2,
    /** REVOKED - Member authority under specific EGF was terminated by the governing authority */
    REVOKED = 3,
    /** NOT_FOUND - Member is not associated with given credential schema in the EGF */
    NOT_FOUND = 10,
    UNRECOGNIZED = -1
}
export declare function registrationStatusFromJSON(object: any): RegistrationStatus;
export declare function registrationStatusToJSON(object: RegistrationStatus): string;
/** Request to register a new ecosystem governance framework in the current ecosystem */
export interface AddFrameworkRequest {
    /** URI of governance framework organization */
    governanceFrameworkUri: string;
    /** Name of governance framework organization */
    name: string;
    /** Description of governance framework */
    description: string;
}
/** Response to `AddFrameworkRequest` */
export interface AddFrameworkResponse {
    /** Unique framework identifier */
    id: string;
    /** DID URI of Trinsic account which created the governance framework */
    governingAuthority: string;
    /** URN of trust registry for governance framework */
    trustRegistry: string;
}
/** Request to remove a governance framework from the current ecosystem */
export interface RemoveFrameworkRequest {
    /** ID of governance framework to remove */
    id: string;
}
/** Response to `RemoveFrameworkRequest` */
export interface RemoveFrameworkResponse {
}
/** Request to search all governance frameworks within ecosystem */
export interface SearchRegistryRequest {
    /** SQL query to execute against frameworks. Example: `SELECT c from c where c.type == 'GovernanceFramework'` */
    query: string;
    /** Token to fetch next set of results, from previous `SearchRegistryResponse` */
    continuationToken: string;
}
/** Response to `SearchRegistryRequest` */
export interface SearchRegistryResponse {
    /** JSON string containing array of resultant objects */
    itemsJson: string;
    /** Whether more data is available to fetch for query */
    hasMore: boolean;
    /** Token to fetch next set of results via `SearchRegistryRequest` */
    continuationToken: string;
}
/** Ecosystem Governance Framework */
export interface GovernanceFramework {
    /** URI of governance framework organization */
    governanceFrameworkUri: string;
    /** URI of trust registry associated with governance framework */
    trustRegistryUri: string;
    /** Description of governance framework */
    description: string;
}
/**
 * Request to register a member as a valid issuer of a specific credential schema.
 * Only one of `did_uri`, `wallet_id`, or `email` may be specified.
 */
export interface RegisterMemberRequest {
    /** DID URI of member to register */
    didUri: string | undefined;
    /** Trinsic Wallet ID of member to register */
    walletId: string | undefined;
    /** Email address of member to register. Must be associated with an existing Trinsic account. */
    email: string | undefined;
    /** URI of credential schema to register member as authorized issuer of */
    schemaUri: string;
    /** Unix Timestamp member is valid from. Member will not be considered valid before this timestamp. */
    validFromUtc: number;
    /** Unix Timestamp member is valid until. Member will not be considered valid after this timestamp. */
    validUntilUtc: number;
    /** ID of the governance framework that member is being added to */
    frameworkId: string;
}
/** Response to `RegisterMemberRequest` */
export interface RegisterMemberResponse {
}
/**
 * Request to unregister a member as a valid issuer of a specific credential schema.
 * Only one of `did_uri`, `wallet_id`, or `email` may be specified.
 */
export interface UnregisterMemberRequest {
    /** DID URI of member to unregister */
    didUri: string | undefined;
    /** Trinsic Wallet ID of member to unregister */
    walletId: string | undefined;
    /** Email address of member to unregister. Must be associated with an existing Trinsic account. */
    email: string | undefined;
    /** URI of credential schema to unregister member as authorized issuer of */
    schemaUri: string;
    /** ID of the governance framework that member is being removed from */
    frameworkId: string;
}
/** Response to `UnregisterMemberRequest` */
export interface UnregisterMemberResponse {
}
/**
 * Request to fetch membership status in governance framework for a specific credential schema.
 * Only one of `did_uri`, `x509_cert` may be specified.
 */
export interface GetMembershipStatusRequest {
    /** URI of governance framework */
    governanceFrameworkUri: string;
    /** DID URI of member */
    didUri: string | undefined;
    /** X.509 certificate of member */
    x509Cert: string | undefined;
    /** URI of credential schema associated with membership */
    schemaUri: string;
}
/** Response to `GetMembershipStatusRequest` */
export interface GetMembershipStatusResponse {
    /** Status of member for given credential schema */
    status: RegistrationStatus;
}
/** Not implemented. */
export interface FetchDataRequest {
    governanceFrameworkUri: string;
    query: string;
}
/** Not implemented. */
export interface FetchDataResponse {
    responseJson: string;
    hasMoreResults: boolean;
    continuationToken: string;
}
export declare const AddFrameworkRequest: {
    encode(message: AddFrameworkRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddFrameworkRequest;
    fromJSON(object: any): AddFrameworkRequest;
    toJSON(message: AddFrameworkRequest): unknown;
    fromPartial(object: DeepPartial<AddFrameworkRequest>): AddFrameworkRequest;
};
export declare const AddFrameworkResponse: {
    encode(message: AddFrameworkResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddFrameworkResponse;
    fromJSON(object: any): AddFrameworkResponse;
    toJSON(message: AddFrameworkResponse): unknown;
    fromPartial(object: DeepPartial<AddFrameworkResponse>): AddFrameworkResponse;
};
export declare const RemoveFrameworkRequest: {
    encode(message: RemoveFrameworkRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFrameworkRequest;
    fromJSON(object: any): RemoveFrameworkRequest;
    toJSON(message: RemoveFrameworkRequest): unknown;
    fromPartial(object: DeepPartial<RemoveFrameworkRequest>): RemoveFrameworkRequest;
};
export declare const RemoveFrameworkResponse: {
    encode(_: RemoveFrameworkResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFrameworkResponse;
    fromJSON(_: any): RemoveFrameworkResponse;
    toJSON(_: RemoveFrameworkResponse): unknown;
    fromPartial(_: DeepPartial<RemoveFrameworkResponse>): RemoveFrameworkResponse;
};
export declare const SearchRegistryRequest: {
    encode(message: SearchRegistryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchRegistryRequest;
    fromJSON(object: any): SearchRegistryRequest;
    toJSON(message: SearchRegistryRequest): unknown;
    fromPartial(object: DeepPartial<SearchRegistryRequest>): SearchRegistryRequest;
};
export declare const SearchRegistryResponse: {
    encode(message: SearchRegistryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchRegistryResponse;
    fromJSON(object: any): SearchRegistryResponse;
    toJSON(message: SearchRegistryResponse): unknown;
    fromPartial(object: DeepPartial<SearchRegistryResponse>): SearchRegistryResponse;
};
export declare const GovernanceFramework: {
    encode(message: GovernanceFramework, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GovernanceFramework;
    fromJSON(object: any): GovernanceFramework;
    toJSON(message: GovernanceFramework): unknown;
    fromPartial(object: DeepPartial<GovernanceFramework>): GovernanceFramework;
};
export declare const RegisterMemberRequest: {
    encode(message: RegisterMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterMemberRequest;
    fromJSON(object: any): RegisterMemberRequest;
    toJSON(message: RegisterMemberRequest): unknown;
    fromPartial(object: DeepPartial<RegisterMemberRequest>): RegisterMemberRequest;
};
export declare const RegisterMemberResponse: {
    encode(_: RegisterMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterMemberResponse;
    fromJSON(_: any): RegisterMemberResponse;
    toJSON(_: RegisterMemberResponse): unknown;
    fromPartial(_: DeepPartial<RegisterMemberResponse>): RegisterMemberResponse;
};
export declare const UnregisterMemberRequest: {
    encode(message: UnregisterMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterMemberRequest;
    fromJSON(object: any): UnregisterMemberRequest;
    toJSON(message: UnregisterMemberRequest): unknown;
    fromPartial(object: DeepPartial<UnregisterMemberRequest>): UnregisterMemberRequest;
};
export declare const UnregisterMemberResponse: {
    encode(_: UnregisterMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterMemberResponse;
    fromJSON(_: any): UnregisterMemberResponse;
    toJSON(_: UnregisterMemberResponse): unknown;
    fromPartial(_: DeepPartial<UnregisterMemberResponse>): UnregisterMemberResponse;
};
export declare const GetMembershipStatusRequest: {
    encode(message: GetMembershipStatusRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMembershipStatusRequest;
    fromJSON(object: any): GetMembershipStatusRequest;
    toJSON(message: GetMembershipStatusRequest): unknown;
    fromPartial(object: DeepPartial<GetMembershipStatusRequest>): GetMembershipStatusRequest;
};
export declare const GetMembershipStatusResponse: {
    encode(message: GetMembershipStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMembershipStatusResponse;
    fromJSON(object: any): GetMembershipStatusResponse;
    toJSON(message: GetMembershipStatusResponse): unknown;
    fromPartial(object: DeepPartial<GetMembershipStatusResponse>): GetMembershipStatusResponse;
};
export declare const FetchDataRequest: {
    encode(message: FetchDataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchDataRequest;
    fromJSON(object: any): FetchDataRequest;
    toJSON(message: FetchDataRequest): unknown;
    fromPartial(object: DeepPartial<FetchDataRequest>): FetchDataRequest;
};
export declare const FetchDataResponse: {
    encode(message: FetchDataResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchDataResponse;
    fromJSON(object: any): FetchDataResponse;
    toJSON(message: FetchDataResponse): unknown;
    fromPartial(object: DeepPartial<FetchDataResponse>): FetchDataResponse;
};
export declare type TrustRegistryDefinition = typeof TrustRegistryDefinition;
export declare const TrustRegistryDefinition: {
    readonly name: "TrustRegistry";
    readonly fullName: "services.trustregistry.v1.TrustRegistry";
    readonly methods: {
        /** Add a governance framework to the ecosystem */
        readonly addFramework: {
            readonly name: "AddFramework";
            readonly requestType: {
                encode(message: AddFrameworkRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddFrameworkRequest;
                fromJSON(object: any): AddFrameworkRequest;
                toJSON(message: AddFrameworkRequest): unknown;
                fromPartial(object: DeepPartial<AddFrameworkRequest>): AddFrameworkRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AddFrameworkResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AddFrameworkResponse;
                fromJSON(object: any): AddFrameworkResponse;
                toJSON(message: AddFrameworkResponse): unknown;
                fromPartial(object: DeepPartial<AddFrameworkResponse>): AddFrameworkResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Remove a governance framework from the ecosystem */
        readonly removeFramework: {
            readonly name: "RemoveFramework";
            readonly requestType: {
                encode(message: RemoveFrameworkRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFrameworkRequest;
                fromJSON(object: any): RemoveFrameworkRequest;
                toJSON(message: RemoveFrameworkRequest): unknown;
                fromPartial(object: DeepPartial<RemoveFrameworkRequest>): RemoveFrameworkRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: RemoveFrameworkResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFrameworkResponse;
                fromJSON(_: any): RemoveFrameworkResponse;
                toJSON(_: RemoveFrameworkResponse): unknown;
                fromPartial(_: DeepPartial<RemoveFrameworkResponse>): RemoveFrameworkResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search the ecosystem's governance frameworks */
        readonly searchRegistry: {
            readonly name: "SearchRegistry";
            readonly requestType: {
                encode(message: SearchRegistryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchRegistryRequest;
                fromJSON(object: any): SearchRegistryRequest;
                toJSON(message: SearchRegistryRequest): unknown;
                fromPartial(object: DeepPartial<SearchRegistryRequest>): SearchRegistryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SearchRegistryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SearchRegistryResponse;
                fromJSON(object: any): SearchRegistryResponse;
                toJSON(message: SearchRegistryResponse): unknown;
                fromPartial(object: DeepPartial<SearchRegistryResponse>): SearchRegistryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Register an authoritative issuer for a credential schema */
        readonly registerMember: {
            readonly name: "RegisterMember";
            readonly requestType: {
                encode(message: RegisterMemberRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterMemberRequest;
                fromJSON(object: any): RegisterMemberRequest;
                toJSON(message: RegisterMemberRequest): unknown;
                fromPartial(object: DeepPartial<RegisterMemberRequest>): RegisterMemberRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: RegisterMemberResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RegisterMemberResponse;
                fromJSON(_: any): RegisterMemberResponse;
                toJSON(_: RegisterMemberResponse): unknown;
                fromPartial(_: DeepPartial<RegisterMemberResponse>): RegisterMemberResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Removes an authoritative issuer for a credential schema from the trust registry */
        readonly unregisterMember: {
            readonly name: "UnregisterMember";
            readonly requestType: {
                encode(message: UnregisterMemberRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterMemberRequest;
                fromJSON(object: any): UnregisterMemberRequest;
                toJSON(message: UnregisterMemberRequest): unknown;
                fromPartial(object: DeepPartial<UnregisterMemberRequest>): UnregisterMemberRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: UnregisterMemberResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterMemberResponse;
                fromJSON(_: any): UnregisterMemberResponse;
                toJSON(_: UnregisterMemberResponse): unknown;
                fromPartial(_: DeepPartial<UnregisterMemberResponse>): UnregisterMemberResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Fetch the membership status of an issuer for a given credential schema in a trust registry */
        readonly getMembershipStatus: {
            readonly name: "GetMembershipStatus";
            readonly requestType: {
                encode(message: GetMembershipStatusRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetMembershipStatusRequest;
                fromJSON(object: any): GetMembershipStatusRequest;
                toJSON(message: GetMembershipStatusRequest): unknown;
                fromPartial(object: DeepPartial<GetMembershipStatusRequest>): GetMembershipStatusRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetMembershipStatusResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetMembershipStatusResponse;
                fromJSON(object: any): GetMembershipStatusResponse;
                toJSON(message: GetMembershipStatusResponse): unknown;
                fromPartial(object: DeepPartial<GetMembershipStatusResponse>): GetMembershipStatusResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Not implemented. */
        readonly fetchData: {
            readonly name: "FetchData";
            readonly requestType: {
                encode(message: FetchDataRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchDataRequest;
                fromJSON(object: any): FetchDataRequest;
                toJSON(message: FetchDataRequest): unknown;
                fromPartial(object: DeepPartial<FetchDataRequest>): FetchDataRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: FetchDataResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchDataResponse;
                fromJSON(object: any): FetchDataResponse;
                toJSON(message: FetchDataResponse): unknown;
                fromPartial(object: DeepPartial<FetchDataResponse>): FetchDataResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
