"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustRegistryDefinition = exports.FetchDataResponse = exports.FetchDataRequest = exports.GetMembershipStatusResponse = exports.GetMembershipStatusRequest = exports.UnregisterMemberResponse = exports.UnregisterMemberRequest = exports.RegisterMemberResponse = exports.RegisterMemberRequest = exports.GovernanceFramework = exports.SearchRegistryResponse = exports.SearchRegistryRequest = exports.RemoveFrameworkResponse = exports.RemoveFrameworkRequest = exports.AddFrameworkResponse = exports.AddFrameworkRequest = exports.registrationStatusToJSON = exports.registrationStatusFromJSON = exports.RegistrationStatus = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
var RegistrationStatus;
(function (RegistrationStatus) {
    /** CURRENT - Member is currently authorized, as of the time of the query */
    RegistrationStatus[RegistrationStatus["CURRENT"] = 0] = "CURRENT";
    /** EXPIRED - Member's authorization has expired */
    RegistrationStatus[RegistrationStatus["EXPIRED"] = 1] = "EXPIRED";
    /** TERMINATED - Member has voluntarily ceased Issuer role under the specific EGF */
    RegistrationStatus[RegistrationStatus["TERMINATED"] = 2] = "TERMINATED";
    /** REVOKED - Member authority under specific EGF was terminated by the governing authority */
    RegistrationStatus[RegistrationStatus["REVOKED"] = 3] = "REVOKED";
    /** NOT_FOUND - Member is not associated with given credential schema in the EGF */
    RegistrationStatus[RegistrationStatus["NOT_FOUND"] = 10] = "NOT_FOUND";
    RegistrationStatus[RegistrationStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RegistrationStatus = exports.RegistrationStatus || (exports.RegistrationStatus = {}));
function registrationStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "CURRENT":
            return RegistrationStatus.CURRENT;
        case 1:
        case "EXPIRED":
            return RegistrationStatus.EXPIRED;
        case 2:
        case "TERMINATED":
            return RegistrationStatus.TERMINATED;
        case 3:
        case "REVOKED":
            return RegistrationStatus.REVOKED;
        case 10:
        case "NOT_FOUND":
            return RegistrationStatus.NOT_FOUND;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RegistrationStatus.UNRECOGNIZED;
    }
}
exports.registrationStatusFromJSON = registrationStatusFromJSON;
function registrationStatusToJSON(object) {
    switch (object) {
        case RegistrationStatus.CURRENT:
            return "CURRENT";
        case RegistrationStatus.EXPIRED:
            return "EXPIRED";
        case RegistrationStatus.TERMINATED:
            return "TERMINATED";
        case RegistrationStatus.REVOKED:
            return "REVOKED";
        case RegistrationStatus.NOT_FOUND:
            return "NOT_FOUND";
        case RegistrationStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.registrationStatusToJSON = registrationStatusToJSON;
function createBaseAddFrameworkRequest() {
    return { governanceFrameworkUri: "", name: "", description: "" };
}
exports.AddFrameworkRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.governanceFrameworkUri !== "") {
            writer.uint32(10).string(message.governanceFrameworkUri);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddFrameworkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceFrameworkUri = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceFrameworkUri: isSet(object.governanceFrameworkUri)
                ? String(object.governanceFrameworkUri)
                : "",
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceFrameworkUri !== undefined &&
            (obj.governanceFrameworkUri = message.governanceFrameworkUri);
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined &&
            (obj.description = message.description);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddFrameworkRequest();
        message.governanceFrameworkUri = (_a = object.governanceFrameworkUri) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAddFrameworkResponse() {
    return { id: "", governingAuthority: "", trustRegistry: "" };
}
exports.AddFrameworkResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.governingAuthority !== "") {
            writer.uint32(18).string(message.governingAuthority);
        }
        if (message.trustRegistry !== "") {
            writer.uint32(26).string(message.trustRegistry);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddFrameworkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.governingAuthority = reader.string();
                    break;
                case 3:
                    message.trustRegistry = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            governingAuthority: isSet(object.governingAuthority)
                ? String(object.governingAuthority)
                : "",
            trustRegistry: isSet(object.trustRegistry)
                ? String(object.trustRegistry)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.governingAuthority !== undefined &&
            (obj.governingAuthority = message.governingAuthority);
        message.trustRegistry !== undefined &&
            (obj.trustRegistry = message.trustRegistry);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAddFrameworkResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.governingAuthority = (_b = object.governingAuthority) !== null && _b !== void 0 ? _b : "";
        message.trustRegistry = (_c = object.trustRegistry) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRemoveFrameworkRequest() {
    return { id: "" };
}
exports.RemoveFrameworkRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFrameworkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveFrameworkRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveFrameworkResponse() {
    return {};
}
exports.RemoveFrameworkResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFrameworkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseRemoveFrameworkResponse();
        return message;
    },
};
function createBaseSearchRegistryRequest() {
    return { query: "", continuationToken: "" };
}
exports.SearchRegistryRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.continuationToken !== "") {
            writer.uint32(18).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchRegistryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.query = reader.string();
                    break;
                case 2:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? String(object.query) : "",
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.query !== undefined && (obj.query = message.query);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSearchRegistryRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.continuationToken = (_b = object.continuationToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSearchRegistryResponse() {
    return { itemsJson: "", hasMore: false, continuationToken: "" };
}
exports.SearchRegistryResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.itemsJson !== "") {
            writer.uint32(10).string(message.itemsJson);
        }
        if (message.hasMore === true) {
            writer.uint32(16).bool(message.hasMore);
        }
        if (message.continuationToken !== "") {
            writer.uint32(34).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchRegistryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemsJson = reader.string();
                    break;
                case 2:
                    message.hasMore = reader.bool();
                    break;
                case 4:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            itemsJson: isSet(object.itemsJson) ? String(object.itemsJson) : "",
            hasMore: isSet(object.hasMore) ? Boolean(object.hasMore) : false,
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.itemsJson !== undefined && (obj.itemsJson = message.itemsJson);
        message.hasMore !== undefined && (obj.hasMore = message.hasMore);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSearchRegistryResponse();
        message.itemsJson = (_a = object.itemsJson) !== null && _a !== void 0 ? _a : "";
        message.hasMore = (_b = object.hasMore) !== null && _b !== void 0 ? _b : false;
        message.continuationToken = (_c = object.continuationToken) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGovernanceFramework() {
    return { governanceFrameworkUri: "", trustRegistryUri: "", description: "" };
}
exports.GovernanceFramework = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.governanceFrameworkUri !== "") {
            writer.uint32(10).string(message.governanceFrameworkUri);
        }
        if (message.trustRegistryUri !== "") {
            writer.uint32(18).string(message.trustRegistryUri);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGovernanceFramework();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceFrameworkUri = reader.string();
                    break;
                case 2:
                    message.trustRegistryUri = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceFrameworkUri: isSet(object.governanceFrameworkUri)
                ? String(object.governanceFrameworkUri)
                : "",
            trustRegistryUri: isSet(object.trustRegistryUri)
                ? String(object.trustRegistryUri)
                : "",
            description: isSet(object.description) ? String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceFrameworkUri !== undefined &&
            (obj.governanceFrameworkUri = message.governanceFrameworkUri);
        message.trustRegistryUri !== undefined &&
            (obj.trustRegistryUri = message.trustRegistryUri);
        message.description !== undefined &&
            (obj.description = message.description);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGovernanceFramework();
        message.governanceFrameworkUri = (_a = object.governanceFrameworkUri) !== null && _a !== void 0 ? _a : "";
        message.trustRegistryUri = (_b = object.trustRegistryUri) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRegisterMemberRequest() {
    return {
        didUri: undefined,
        walletId: undefined,
        email: undefined,
        schemaUri: "",
        validFromUtc: 0,
        validUntilUtc: 0,
        frameworkId: "",
    };
}
exports.RegisterMemberRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.didUri !== undefined) {
            writer.uint32(10).string(message.didUri);
        }
        if (message.walletId !== undefined) {
            writer.uint32(26).string(message.walletId);
        }
        if (message.email !== undefined) {
            writer.uint32(34).string(message.email);
        }
        if (message.schemaUri !== "") {
            writer.uint32(82).string(message.schemaUri);
        }
        if (message.validFromUtc !== 0) {
            writer.uint32(88).uint64(message.validFromUtc);
        }
        if (message.validUntilUtc !== 0) {
            writer.uint32(96).uint64(message.validUntilUtc);
        }
        if (message.frameworkId !== "") {
            writer.uint32(242).string(message.frameworkId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.didUri = reader.string();
                    break;
                case 3:
                    message.walletId = reader.string();
                    break;
                case 4:
                    message.email = reader.string();
                    break;
                case 10:
                    message.schemaUri = reader.string();
                    break;
                case 11:
                    message.validFromUtc = longToNumber(reader.uint64());
                    break;
                case 12:
                    message.validUntilUtc = longToNumber(reader.uint64());
                    break;
                case 30:
                    message.frameworkId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            didUri: isSet(object.didUri) ? String(object.didUri) : undefined,
            walletId: isSet(object.walletId) ? String(object.walletId) : undefined,
            email: isSet(object.email) ? String(object.email) : undefined,
            schemaUri: isSet(object.schemaUri) ? String(object.schemaUri) : "",
            validFromUtc: isSet(object.validFromUtc)
                ? Number(object.validFromUtc)
                : 0,
            validUntilUtc: isSet(object.validUntilUtc)
                ? Number(object.validUntilUtc)
                : 0,
            frameworkId: isSet(object.frameworkId) ? String(object.frameworkId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.didUri !== undefined && (obj.didUri = message.didUri);
        message.walletId !== undefined && (obj.walletId = message.walletId);
        message.email !== undefined && (obj.email = message.email);
        message.schemaUri !== undefined && (obj.schemaUri = message.schemaUri);
        message.validFromUtc !== undefined &&
            (obj.validFromUtc = Math.round(message.validFromUtc));
        message.validUntilUtc !== undefined &&
            (obj.validUntilUtc = Math.round(message.validUntilUtc));
        message.frameworkId !== undefined &&
            (obj.frameworkId = message.frameworkId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseRegisterMemberRequest();
        message.didUri = (_a = object.didUri) !== null && _a !== void 0 ? _a : undefined;
        message.walletId = (_b = object.walletId) !== null && _b !== void 0 ? _b : undefined;
        message.email = (_c = object.email) !== null && _c !== void 0 ? _c : undefined;
        message.schemaUri = (_d = object.schemaUri) !== null && _d !== void 0 ? _d : "";
        message.validFromUtc = (_e = object.validFromUtc) !== null && _e !== void 0 ? _e : 0;
        message.validUntilUtc = (_f = object.validUntilUtc) !== null && _f !== void 0 ? _f : 0;
        message.frameworkId = (_g = object.frameworkId) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseRegisterMemberResponse() {
    return {};
}
exports.RegisterMemberResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseRegisterMemberResponse();
        return message;
    },
};
function createBaseUnregisterMemberRequest() {
    return {
        didUri: undefined,
        walletId: undefined,
        email: undefined,
        schemaUri: "",
        frameworkId: "",
    };
}
exports.UnregisterMemberRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.didUri !== undefined) {
            writer.uint32(10).string(message.didUri);
        }
        if (message.walletId !== undefined) {
            writer.uint32(26).string(message.walletId);
        }
        if (message.email !== undefined) {
            writer.uint32(34).string(message.email);
        }
        if (message.schemaUri !== "") {
            writer.uint32(82).string(message.schemaUri);
        }
        if (message.frameworkId !== "") {
            writer.uint32(162).string(message.frameworkId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnregisterMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.didUri = reader.string();
                    break;
                case 3:
                    message.walletId = reader.string();
                    break;
                case 4:
                    message.email = reader.string();
                    break;
                case 10:
                    message.schemaUri = reader.string();
                    break;
                case 20:
                    message.frameworkId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            didUri: isSet(object.didUri) ? String(object.didUri) : undefined,
            walletId: isSet(object.walletId) ? String(object.walletId) : undefined,
            email: isSet(object.email) ? String(object.email) : undefined,
            schemaUri: isSet(object.schemaUri) ? String(object.schemaUri) : "",
            frameworkId: isSet(object.frameworkId) ? String(object.frameworkId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.didUri !== undefined && (obj.didUri = message.didUri);
        message.walletId !== undefined && (obj.walletId = message.walletId);
        message.email !== undefined && (obj.email = message.email);
        message.schemaUri !== undefined && (obj.schemaUri = message.schemaUri);
        message.frameworkId !== undefined &&
            (obj.frameworkId = message.frameworkId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUnregisterMemberRequest();
        message.didUri = (_a = object.didUri) !== null && _a !== void 0 ? _a : undefined;
        message.walletId = (_b = object.walletId) !== null && _b !== void 0 ? _b : undefined;
        message.email = (_c = object.email) !== null && _c !== void 0 ? _c : undefined;
        message.schemaUri = (_d = object.schemaUri) !== null && _d !== void 0 ? _d : "";
        message.frameworkId = (_e = object.frameworkId) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseUnregisterMemberResponse() {
    return {};
}
exports.UnregisterMemberResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnregisterMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseUnregisterMemberResponse();
        return message;
    },
};
function createBaseGetMembershipStatusRequest() {
    return {
        governanceFrameworkUri: "",
        didUri: undefined,
        x509Cert: undefined,
        schemaUri: "",
    };
}
exports.GetMembershipStatusRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.governanceFrameworkUri !== "") {
            writer.uint32(10).string(message.governanceFrameworkUri);
        }
        if (message.didUri !== undefined) {
            writer.uint32(18).string(message.didUri);
        }
        if (message.x509Cert !== undefined) {
            writer.uint32(26).string(message.x509Cert);
        }
        if (message.schemaUri !== "") {
            writer.uint32(34).string(message.schemaUri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMembershipStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceFrameworkUri = reader.string();
                    break;
                case 2:
                    message.didUri = reader.string();
                    break;
                case 3:
                    message.x509Cert = reader.string();
                    break;
                case 4:
                    message.schemaUri = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceFrameworkUri: isSet(object.governanceFrameworkUri)
                ? String(object.governanceFrameworkUri)
                : "",
            didUri: isSet(object.didUri) ? String(object.didUri) : undefined,
            x509Cert: isSet(object.x509Cert) ? String(object.x509Cert) : undefined,
            schemaUri: isSet(object.schemaUri) ? String(object.schemaUri) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceFrameworkUri !== undefined &&
            (obj.governanceFrameworkUri = message.governanceFrameworkUri);
        message.didUri !== undefined && (obj.didUri = message.didUri);
        message.x509Cert !== undefined && (obj.x509Cert = message.x509Cert);
        message.schemaUri !== undefined && (obj.schemaUri = message.schemaUri);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGetMembershipStatusRequest();
        message.governanceFrameworkUri = (_a = object.governanceFrameworkUri) !== null && _a !== void 0 ? _a : "";
        message.didUri = (_b = object.didUri) !== null && _b !== void 0 ? _b : undefined;
        message.x509Cert = (_c = object.x509Cert) !== null && _c !== void 0 ? _c : undefined;
        message.schemaUri = (_d = object.schemaUri) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseGetMembershipStatusResponse() {
    return { status: 0 };
}
exports.GetMembershipStatusResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMembershipStatusResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status)
                ? registrationStatusFromJSON(object.status)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined &&
            (obj.status = registrationStatusToJSON(message.status));
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetMembershipStatusResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseFetchDataRequest() {
    return { governanceFrameworkUri: "", query: "" };
}
exports.FetchDataRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.governanceFrameworkUri !== "") {
            writer.uint32(10).string(message.governanceFrameworkUri);
        }
        if (message.query !== "") {
            writer.uint32(18).string(message.query);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceFrameworkUri = reader.string();
                    break;
                case 2:
                    message.query = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceFrameworkUri: isSet(object.governanceFrameworkUri)
                ? String(object.governanceFrameworkUri)
                : "",
            query: isSet(object.query) ? String(object.query) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceFrameworkUri !== undefined &&
            (obj.governanceFrameworkUri = message.governanceFrameworkUri);
        message.query !== undefined && (obj.query = message.query);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFetchDataRequest();
        message.governanceFrameworkUri = (_a = object.governanceFrameworkUri) !== null && _a !== void 0 ? _a : "";
        message.query = (_b = object.query) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFetchDataResponse() {
    return { responseJson: "", hasMoreResults: false, continuationToken: "" };
}
exports.FetchDataResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.responseJson !== "") {
            writer.uint32(10).string(message.responseJson);
        }
        if (message.hasMoreResults === true) {
            writer.uint32(16).bool(message.hasMoreResults);
        }
        if (message.continuationToken !== "") {
            writer.uint32(26).string(message.continuationToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.responseJson = reader.string();
                    break;
                case 2:
                    message.hasMoreResults = reader.bool();
                    break;
                case 3:
                    message.continuationToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            responseJson: isSet(object.responseJson)
                ? String(object.responseJson)
                : "",
            hasMoreResults: isSet(object.hasMoreResults)
                ? Boolean(object.hasMoreResults)
                : false,
            continuationToken: isSet(object.continuationToken)
                ? String(object.continuationToken)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.responseJson !== undefined &&
            (obj.responseJson = message.responseJson);
        message.hasMoreResults !== undefined &&
            (obj.hasMoreResults = message.hasMoreResults);
        message.continuationToken !== undefined &&
            (obj.continuationToken = message.continuationToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFetchDataResponse();
        message.responseJson = (_a = object.responseJson) !== null && _a !== void 0 ? _a : "";
        message.hasMoreResults = (_b = object.hasMoreResults) !== null && _b !== void 0 ? _b : false;
        message.continuationToken = (_c = object.continuationToken) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
exports.TrustRegistryDefinition = {
    name: "TrustRegistry",
    fullName: "services.trustregistry.v1.TrustRegistry",
    methods: {
        /** Add a governance framework to the ecosystem */
        addFramework: {
            name: "AddFramework",
            requestType: exports.AddFrameworkRequest,
            requestStream: false,
            responseType: exports.AddFrameworkResponse,
            responseStream: false,
            options: {},
        },
        /** Remove a governance framework from the ecosystem */
        removeFramework: {
            name: "RemoveFramework",
            requestType: exports.RemoveFrameworkRequest,
            requestStream: false,
            responseType: exports.RemoveFrameworkResponse,
            responseStream: false,
            options: {},
        },
        /** Search the ecosystem's governance frameworks */
        searchRegistry: {
            name: "SearchRegistry",
            requestType: exports.SearchRegistryRequest,
            requestStream: false,
            responseType: exports.SearchRegistryResponse,
            responseStream: false,
            options: {},
        },
        /** Register an authoritative issuer for a credential schema */
        registerMember: {
            name: "RegisterMember",
            requestType: exports.RegisterMemberRequest,
            requestStream: false,
            responseType: exports.RegisterMemberResponse,
            responseStream: false,
            options: {},
        },
        /** Removes an authoritative issuer for a credential schema from the trust registry */
        unregisterMember: {
            name: "UnregisterMember",
            requestType: exports.UnregisterMemberRequest,
            requestStream: false,
            responseType: exports.UnregisterMemberResponse,
            responseStream: false,
            options: {},
        },
        /** Fetch the membership status of an issuer for a given credential schema in a trust registry */
        getMembershipStatus: {
            name: "GetMembershipStatus",
            requestType: exports.GetMembershipStatusRequest,
            requestStream: false,
            responseType: exports.GetMembershipStatusResponse,
            responseStream: false,
            options: {},
        },
        /** Not implemented. */
        fetchData: {
            name: "FetchData",
            requestType: exports.FetchDataRequest,
            requestStream: false,
            responseType: exports.FetchDataResponse,
            responseStream: true,
            options: {},
        },
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=trust-registry.js.map