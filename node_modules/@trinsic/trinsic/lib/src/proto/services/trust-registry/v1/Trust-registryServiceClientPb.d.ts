/**
 * @fileoverview gRPC-Web generated client stub for services.trustregistry.v1
 * @enhanceable
 * @public
 */
import * as grpcWeb from "grpc-web";
import * as services_trust$registry_v1_trust$registry_pb from "../../../services/trust-registry/v1/trust-registry_pb";
export declare class TrustRegistryClient {
    client_: grpcWeb.AbstractClientBase;
    hostname_: string;
    credentials_: null | {
        [index: string]: string;
    };
    options_: null | {
        [index: string]: any;
    };
    constructor(hostname: string, credentials?: null | {
        [index: string]: string;
    }, options?: null | {
        [index: string]: any;
    });
    methodInfoAddFramework: any;
    addFramework(request: services_trust$registry_v1_trust$registry_pb.AddFrameworkRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse>;
    addFramework(request: services_trust$registry_v1_trust$registry_pb.AddFrameworkRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse>;
    methodInfoRemoveFramework: any;
    removeFramework(request: services_trust$registry_v1_trust$registry_pb.RemoveFrameworkRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse>;
    removeFramework(request: services_trust$registry_v1_trust$registry_pb.RemoveFrameworkRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse>;
    methodInfoSearchRegistry: any;
    searchRegistry(request: services_trust$registry_v1_trust$registry_pb.SearchRegistryRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse>;
    searchRegistry(request: services_trust$registry_v1_trust$registry_pb.SearchRegistryRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse>;
    methodInfoRegisterIssuer: any;
    registerIssuer(request: services_trust$registry_v1_trust$registry_pb.RegisterIssuerRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse>;
    registerIssuer(request: services_trust$registry_v1_trust$registry_pb.RegisterIssuerRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse>;
    methodInfoRegisterVerifier: any;
    registerVerifier(request: services_trust$registry_v1_trust$registry_pb.RegisterVerifierRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse>;
    registerVerifier(request: services_trust$registry_v1_trust$registry_pb.RegisterVerifierRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse>;
    methodInfoUnregisterIssuer: any;
    unregisterIssuer(request: services_trust$registry_v1_trust$registry_pb.UnregisterIssuerRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse>;
    unregisterIssuer(request: services_trust$registry_v1_trust$registry_pb.UnregisterIssuerRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse>;
    methodInfoUnregisterVerifier: any;
    unregisterVerifier(request: services_trust$registry_v1_trust$registry_pb.UnregisterVerifierRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse>;
    unregisterVerifier(request: services_trust$registry_v1_trust$registry_pb.UnregisterVerifierRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse>;
    methodInfoCheckIssuerStatus: any;
    checkIssuerStatus(request: services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse>;
    checkIssuerStatus(request: services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse>;
    methodInfoCheckVerifierStatus: any;
    checkVerifierStatus(request: services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusRequest, metadata: grpcWeb.Metadata | null): Promise<services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse>;
    checkVerifierStatus(request: services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse) => void): grpcWeb.ClientReadableStream<services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse>;
    methodInfoFetchData: any;
    fetchData(request: services_trust$registry_v1_trust$registry_pb.FetchDataRequest, metadata?: grpcWeb.Metadata): any;
}
