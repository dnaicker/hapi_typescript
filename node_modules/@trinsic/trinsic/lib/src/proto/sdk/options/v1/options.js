"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceOptions = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseServiceOptions() {
    return {
        serverEndpoint: "",
        serverPort: 0,
        serverUseTls: false,
        authToken: "",
    };
}
exports.ServiceOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.serverEndpoint !== "") {
            writer.uint32(10).string(message.serverEndpoint);
        }
        if (message.serverPort !== 0) {
            writer.uint32(16).int32(message.serverPort);
        }
        if (message.serverUseTls === true) {
            writer.uint32(24).bool(message.serverUseTls);
        }
        if (message.authToken !== "") {
            writer.uint32(34).string(message.authToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.serverEndpoint = reader.string();
                    break;
                case 2:
                    message.serverPort = reader.int32();
                    break;
                case 3:
                    message.serverUseTls = reader.bool();
                    break;
                case 4:
                    message.authToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            serverEndpoint: isSet(object.serverEndpoint)
                ? String(object.serverEndpoint)
                : "",
            serverPort: isSet(object.serverPort) ? Number(object.serverPort) : 0,
            serverUseTls: isSet(object.serverUseTls)
                ? Boolean(object.serverUseTls)
                : false,
            authToken: isSet(object.authToken) ? String(object.authToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.serverEndpoint !== undefined &&
            (obj.serverEndpoint = message.serverEndpoint);
        message.serverPort !== undefined &&
            (obj.serverPort = Math.round(message.serverPort));
        message.serverUseTls !== undefined &&
            (obj.serverUseTls = message.serverUseTls);
        message.authToken !== undefined && (obj.authToken = message.authToken);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseServiceOptions();
        message.serverEndpoint = (_a = object.serverEndpoint) !== null && _a !== void 0 ? _a : "";
        message.serverPort = (_b = object.serverPort) !== null && _b !== void 0 ? _b : 0;
        message.serverUseTls = (_c = object.serverUseTls) !== null && _c !== void 0 ? _c : false;
        message.authToken = (_d = object.authToken) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=options.js.map