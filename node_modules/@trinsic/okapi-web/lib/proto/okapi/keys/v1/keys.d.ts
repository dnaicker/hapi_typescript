import _m0 from "protobufjs/minimal";
export declare enum KeyType {
    KEY_TYPE_UNSPECIFIED = 0,
    KEY_TYPE_ED25519 = 1,
    KEY_TYPE_X25519 = 2,
    KEY_TYPE_P256 = 3,
    KEY_TYPE_BLS12381G1G2 = 4,
    KEY_TYPE_SECP256K1 = 5,
    UNRECOGNIZED = -1
}
export declare function keyTypeFromJSON(object: any): KeyType;
export declare function keyTypeToJSON(object: KeyType): string;
export declare enum DocumentKeyFormat {
    DOCUMENT_KEY_FORMAT_UNSPECIFIED = 0,
    DOCUMENT_KEY_FORMAT_LD = 1,
    DOCUMENT_KEY_FORMAT_JOSE = 2,
    UNRECOGNIZED = -1
}
export declare function documentKeyFormatFromJSON(object: any): DocumentKeyFormat;
export declare function documentKeyFormatToJSON(object: DocumentKeyFormat): string;
export interface GenerateKeyRequest {
    seed: Uint8Array;
    keyType: KeyType;
    keyFormat: DocumentKeyFormat;
}
export interface GenerateKeyResponse {
    key: JsonWebKey[];
    didDocument: {
        [key: string]: any;
    } | undefined;
}
export interface ResolveRequest {
    did: string;
}
export interface ResolveResponse {
    didDocument: {
        [key: string]: any;
    } | undefined;
    keys: JsonWebKey[];
}
export interface JsonWebKey {
    kid: string;
    /** public_key */
    x: string;
    /** public_key */
    y: string;
    /** secret_key */
    d: string;
    crv: string;
    kty: string;
}
export declare const GenerateKeyRequest: {
    encode(message: GenerateKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenerateKeyRequest;
    fromJSON(object: any): GenerateKeyRequest;
    toJSON(message: GenerateKeyRequest): unknown;
    fromPartial(object: DeepPartial<GenerateKeyRequest>): GenerateKeyRequest;
};
export declare const GenerateKeyResponse: {
    encode(message: GenerateKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenerateKeyResponse;
    fromJSON(object: any): GenerateKeyResponse;
    toJSON(message: GenerateKeyResponse): unknown;
    fromPartial(object: DeepPartial<GenerateKeyResponse>): GenerateKeyResponse;
};
export declare const ResolveRequest: {
    encode(message: ResolveRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResolveRequest;
    fromJSON(object: any): ResolveRequest;
    toJSON(message: ResolveRequest): unknown;
    fromPartial(object: DeepPartial<ResolveRequest>): ResolveRequest;
};
export declare const ResolveResponse: {
    encode(message: ResolveResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResolveResponse;
    fromJSON(object: any): ResolveResponse;
    toJSON(message: ResolveResponse): unknown;
    fromPartial(object: DeepPartial<ResolveResponse>): ResolveResponse;
};
export declare const JsonWebKey: {
    encode(message: JsonWebKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JsonWebKey;
    fromJSON(object: any): JsonWebKey;
    toJSON(message: JsonWebKey): unknown;
    fromPartial(object: DeepPartial<JsonWebKey>): JsonWebKey;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
