/* eslint-disable */
import { JsonWebKey } from "../../keys/v1/keys";
import _m0 from "protobufjs/minimal";
import { Struct } from "../../../google/protobuf/struct";
export var LdSuite;
(function (LdSuite) {
    LdSuite[LdSuite["LD_SUITE_UNSPECIFIED"] = 0] = "LD_SUITE_UNSPECIFIED";
    LdSuite[LdSuite["LD_SUITE_JCSED25519SIGNATURE2020"] = 1] = "LD_SUITE_JCSED25519SIGNATURE2020";
    LdSuite[LdSuite["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LdSuite || (LdSuite = {}));
export function ldSuiteFromJSON(object) {
    switch (object) {
        case 0:
        case "LD_SUITE_UNSPECIFIED":
            return LdSuite.LD_SUITE_UNSPECIFIED;
        case 1:
        case "LD_SUITE_JCSED25519SIGNATURE2020":
            return LdSuite.LD_SUITE_JCSED25519SIGNATURE2020;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LdSuite.UNRECOGNIZED;
    }
}
export function ldSuiteToJSON(object) {
    switch (object) {
        case LdSuite.LD_SUITE_UNSPECIFIED:
            return "LD_SUITE_UNSPECIFIED";
        case LdSuite.LD_SUITE_JCSED25519SIGNATURE2020:
            return "LD_SUITE_JCSED25519SIGNATURE2020";
        case LdSuite.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseCreateProofRequest() {
    return { document: undefined, key: undefined, suite: 0 };
}
export const CreateProofRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.document !== undefined) {
            Struct.encode(Struct.wrap(message.document), writer.uint32(10).fork()).ldelim();
        }
        if (message.key !== undefined) {
            JsonWebKey.encode(message.key, writer.uint32(26).fork()).ldelim();
        }
        if (message.suite !== 0) {
            writer.uint32(32).int32(message.suite);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProofRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.document = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.key = JsonWebKey.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.suite = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            document: isObject(object.document) ? object.document : undefined,
            key: isSet(object.key) ? JsonWebKey.fromJSON(object.key) : undefined,
            suite: isSet(object.suite) ? ldSuiteFromJSON(object.suite) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.document !== undefined && (obj.document = message.document);
        message.key !== undefined &&
            (obj.key = message.key ? JsonWebKey.toJSON(message.key) : undefined);
        message.suite !== undefined && (obj.suite = ldSuiteToJSON(message.suite));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreateProofRequest();
        message.document = (_a = object.document) !== null && _a !== void 0 ? _a : undefined;
        message.key =
            object.key !== undefined && object.key !== null
                ? JsonWebKey.fromPartial(object.key)
                : undefined;
        message.suite = (_b = object.suite) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseCreateProofResponse() {
    return { signedDocument: undefined };
}
export const CreateProofResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.signedDocument !== undefined) {
            Struct.encode(Struct.wrap(message.signedDocument), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProofResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signedDocument = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            signedDocument: isObject(object.signedDocument)
                ? object.signedDocument
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.signedDocument !== undefined &&
            (obj.signedDocument = message.signedDocument);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCreateProofResponse();
        message.signedDocument = (_a = object.signedDocument) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseVerifyProofRequest() {
    return {};
}
export const VerifyProofRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyProofRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseVerifyProofRequest();
        return message;
    },
};
function createBaseVerifyProofResponse() {
    return {};
}
export const VerifyProofResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyProofResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseVerifyProofResponse();
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=proofs.js.map